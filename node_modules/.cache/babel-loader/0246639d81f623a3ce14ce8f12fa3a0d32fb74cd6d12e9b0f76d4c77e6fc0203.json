{"ast":null,"code":"import { Vec3 } from '../math/Vec3.js';\nconst CATMULLROM = 'catmullrom';\nconst CUBICBEZIER = 'cubicbezier';\nconst QUADRATICBEZIER = 'quadraticbezier';\n\n// temp\nconst _a0 = /* @__PURE__ */new Vec3(),\n  _a1 = /* @__PURE__ */new Vec3(),\n  _a2 = /* @__PURE__ */new Vec3(),\n  _a3 = /* @__PURE__ */new Vec3();\n\n/**\n * Get the control points of cubic bezier curve.\n * @param {*} i\n * @param {*} a\n * @param {*} b\n */\nfunction getCtrlPoint(points, i) {\n  let a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.168;\n  let b = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.168;\n  if (i < 1) {\n    _a0.sub(points[1], points[0]).scale(a).add(points[0]);\n  } else {\n    _a0.sub(points[i + 1], points[i - 1]).scale(a).add(points[i]);\n  }\n  if (i > points.length - 3) {\n    const last = points.length - 1;\n    _a1.sub(points[last - 1], points[last]).scale(b).add(points[last]);\n  } else {\n    _a1.sub(points[i], points[i + 2]).scale(b).add(points[i + 1]);\n  }\n  return [_a0.clone(), _a1.clone()];\n}\nfunction getQuadraticBezierPoint(t, p0, c0, p1) {\n  const k = 1 - t;\n  _a0.copy(p0).scale(k ** 2);\n  _a1.copy(c0).scale(2 * k * t);\n  _a2.copy(p1).scale(t ** 2);\n  const ret = new Vec3();\n  ret.add(_a0, _a1).add(_a2);\n  return ret;\n}\nfunction getCubicBezierPoint(t, p0, c0, c1, p1) {\n  const k = 1 - t;\n  _a0.copy(p0).scale(k ** 3);\n  _a1.copy(c0).scale(3 * k ** 2 * t);\n  _a2.copy(c1).scale(3 * k * t ** 2);\n  _a3.copy(p1).scale(t ** 3);\n  const ret = new Vec3();\n  ret.add(_a0, _a1).add(_a2).add(_a3);\n  return ret;\n}\nexport class Curve {\n  constructor() {\n    let {\n      points = [new Vec3(0, 0, 0), new Vec3(0, 1, 0), new Vec3(1, 1, 0), new Vec3(1, 0, 0)],\n      divisions = 12,\n      type = CATMULLROM\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.points = points;\n    this.divisions = divisions;\n    this.type = type;\n  }\n  _getQuadraticBezierPoints() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.divisions;\n    const points = [];\n    const count = this.points.length;\n    if (count < 3) {\n      console.warn('Not enough points provided.');\n      return [];\n    }\n    const p0 = this.points[0];\n    let c0 = this.points[1],\n      p1 = this.points[2];\n    for (let i = 0; i <= divisions; i++) {\n      const p = getQuadraticBezierPoint(i / divisions, p0, c0, p1);\n      points.push(p);\n    }\n    let offset = 3;\n    while (count - offset > 0) {\n      p0.copy(p1);\n      c0 = p1.scale(2).sub(c0);\n      p1 = this.points[offset];\n      for (let i = 1; i <= divisions; i++) {\n        const p = getQuadraticBezierPoint(i / divisions, p0, c0, p1);\n        points.push(p);\n      }\n      offset++;\n    }\n    return points;\n  }\n  _getCubicBezierPoints() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.divisions;\n    const points = [];\n    const count = this.points.length;\n    if (count < 4) {\n      console.warn('Not enough points provided.');\n      return [];\n    }\n    let p0 = this.points[0],\n      c0 = this.points[1],\n      c1 = this.points[2],\n      p1 = this.points[3];\n    for (let i = 0; i <= divisions; i++) {\n      const p = getCubicBezierPoint(i / divisions, p0, c0, c1, p1);\n      points.push(p);\n    }\n    let offset = 4;\n    while (count - offset > 1) {\n      p0.copy(p1);\n      c0 = p1.scale(2).sub(c1);\n      c1 = this.points[offset];\n      p1 = this.points[offset + 1];\n      for (let i = 1; i <= divisions; i++) {\n        const p = getCubicBezierPoint(i / divisions, p0, c0, c1, p1);\n        points.push(p);\n      }\n      offset += 2;\n    }\n    return points;\n  }\n  _getCatmullRomPoints() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.divisions;\n    let a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.168;\n    let b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.168;\n    const points = [];\n    const count = this.points.length;\n    if (count <= 2) {\n      return this.points;\n    }\n    let p0;\n    this.points.forEach((p, i) => {\n      if (i === 0) {\n        p0 = p;\n      } else {\n        const [c0, c1] = getCtrlPoint(this.points, i - 1, a, b);\n        const c = new Curve({\n          points: [p0, c0, c1, p],\n          type: CUBICBEZIER\n        });\n        points.pop();\n        points.push(...c.getPoints(divisions));\n        p0 = p;\n      }\n    });\n    return points;\n  }\n  getPoints() {\n    let divisions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.divisions;\n    let a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.168;\n    let b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.168;\n    const type = this.type;\n    if (type === QUADRATICBEZIER) {\n      return this._getQuadraticBezierPoints(divisions);\n    }\n    if (type === CUBICBEZIER) {\n      return this._getCubicBezierPoints(divisions);\n    }\n    if (type === CATMULLROM) {\n      return this._getCatmullRomPoints(divisions, a, b);\n    }\n    return this.points;\n  }\n}\nCurve.CATMULLROM = CATMULLROM;\nCurve.CUBICBEZIER = CUBICBEZIER;\nCurve.QUADRATICBEZIER = QUADRATICBEZIER;","map":{"version":3,"names":["Vec3","CATMULLROM","CUBICBEZIER","QUADRATICBEZIER","_a0","_a1","_a2","_a3","getCtrlPoint","points","i","a","arguments","length","undefined","b","sub","scale","add","last","clone","getQuadraticBezierPoint","t","p0","c0","p1","k","copy","ret","getCubicBezierPoint","c1","Curve","constructor","divisions","type","_getQuadraticBezierPoints","count","console","warn","p","push","offset","_getCubicBezierPoints","_getCatmullRomPoints","forEach","c","pop","getPoints"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/extras/Curve.js"],"sourcesContent":["import { Vec3 } from '../math/Vec3.js';\n\nconst CATMULLROM = 'catmullrom';\nconst CUBICBEZIER = 'cubicbezier';\nconst QUADRATICBEZIER = 'quadraticbezier';\n\n// temp\nconst _a0 = /* @__PURE__ */ new Vec3(),\n    _a1 = /* @__PURE__ */ new Vec3(),\n    _a2 = /* @__PURE__ */ new Vec3(),\n    _a3 = /* @__PURE__ */ new Vec3();\n\n/**\n * Get the control points of cubic bezier curve.\n * @param {*} i\n * @param {*} a\n * @param {*} b\n */\nfunction getCtrlPoint(points, i, a = 0.168, b = 0.168) {\n    if (i < 1) {\n        _a0.sub(points[1], points[0]).scale(a).add(points[0]);\n    } else {\n        _a0.sub(points[i + 1], points[i - 1])\n            .scale(a)\n            .add(points[i]);\n    }\n    if (i > points.length - 3) {\n        const last = points.length - 1;\n        _a1.sub(points[last - 1], points[last])\n            .scale(b)\n            .add(points[last]);\n    } else {\n        _a1.sub(points[i], points[i + 2])\n            .scale(b)\n            .add(points[i + 1]);\n    }\n    return [_a0.clone(), _a1.clone()];\n}\n\nfunction getQuadraticBezierPoint(t, p0, c0, p1) {\n    const k = 1 - t;\n    _a0.copy(p0).scale(k ** 2);\n    _a1.copy(c0).scale(2 * k * t);\n    _a2.copy(p1).scale(t ** 2);\n    const ret = new Vec3();\n    ret.add(_a0, _a1).add(_a2);\n    return ret;\n}\n\nfunction getCubicBezierPoint(t, p0, c0, c1, p1) {\n    const k = 1 - t;\n    _a0.copy(p0).scale(k ** 3);\n    _a1.copy(c0).scale(3 * k ** 2 * t);\n    _a2.copy(c1).scale(3 * k * t ** 2);\n    _a3.copy(p1).scale(t ** 3);\n    const ret = new Vec3();\n    ret.add(_a0, _a1).add(_a2).add(_a3);\n    return ret;\n}\n\nexport class Curve {\n    constructor({ points = [new Vec3(0, 0, 0), new Vec3(0, 1, 0), new Vec3(1, 1, 0), new Vec3(1, 0, 0)], divisions = 12, type = CATMULLROM } = {}) {\n        this.points = points;\n        this.divisions = divisions;\n        this.type = type;\n    }\n\n    _getQuadraticBezierPoints(divisions = this.divisions) {\n        const points = [];\n        const count = this.points.length;\n\n        if (count < 3) {\n            console.warn('Not enough points provided.');\n            return [];\n        }\n\n        const p0 = this.points[0];\n        let c0 = this.points[1],\n            p1 = this.points[2];\n\n        for (let i = 0; i <= divisions; i++) {\n            const p = getQuadraticBezierPoint(i / divisions, p0, c0, p1);\n            points.push(p);\n        }\n\n        let offset = 3;\n        while (count - offset > 0) {\n            p0.copy(p1);\n            c0 = p1.scale(2).sub(c0);\n            p1 = this.points[offset];\n            for (let i = 1; i <= divisions; i++) {\n                const p = getQuadraticBezierPoint(i / divisions, p0, c0, p1);\n                points.push(p);\n            }\n            offset++;\n        }\n\n        return points;\n    }\n\n    _getCubicBezierPoints(divisions = this.divisions) {\n        const points = [];\n        const count = this.points.length;\n\n        if (count < 4) {\n            console.warn('Not enough points provided.');\n            return [];\n        }\n\n        let p0 = this.points[0],\n            c0 = this.points[1],\n            c1 = this.points[2],\n            p1 = this.points[3];\n\n        for (let i = 0; i <= divisions; i++) {\n            const p = getCubicBezierPoint(i / divisions, p0, c0, c1, p1);\n            points.push(p);\n        }\n\n        let offset = 4;\n        while (count - offset > 1) {\n            p0.copy(p1);\n            c0 = p1.scale(2).sub(c1);\n            c1 = this.points[offset];\n            p1 = this.points[offset + 1];\n            for (let i = 1; i <= divisions; i++) {\n                const p = getCubicBezierPoint(i / divisions, p0, c0, c1, p1);\n                points.push(p);\n            }\n            offset += 2;\n        }\n\n        return points;\n    }\n\n    _getCatmullRomPoints(divisions = this.divisions, a = 0.168, b = 0.168) {\n        const points = [];\n        const count = this.points.length;\n\n        if (count <= 2) {\n            return this.points;\n        }\n\n        let p0;\n        this.points.forEach((p, i) => {\n            if (i === 0) {\n                p0 = p;\n            } else {\n                const [c0, c1] = getCtrlPoint(this.points, i - 1, a, b);\n                const c = new Curve({\n                    points: [p0, c0, c1, p],\n                    type: CUBICBEZIER,\n                });\n                points.pop();\n                points.push(...c.getPoints(divisions));\n                p0 = p;\n            }\n        });\n\n        return points;\n    }\n\n    getPoints(divisions = this.divisions, a = 0.168, b = 0.168) {\n        const type = this.type;\n\n        if (type === QUADRATICBEZIER) {\n            return this._getQuadraticBezierPoints(divisions);\n        }\n\n        if (type === CUBICBEZIER) {\n            return this._getCubicBezierPoints(divisions);\n        }\n\n        if (type === CATMULLROM) {\n            return this._getCatmullRomPoints(divisions, a, b);\n        }\n\n        return this.points;\n    }\n}\n\nCurve.CATMULLROM = CATMULLROM;\nCurve.CUBICBEZIER = CUBICBEZIER;\nCurve.QUADRATICBEZIER = QUADRATICBEZIER;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}