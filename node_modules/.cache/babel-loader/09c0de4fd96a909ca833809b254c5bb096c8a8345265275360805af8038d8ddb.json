{"ast":null,"code":"import { Geometry } from '../core/Geometry.js';\nexport class Plane extends Geometry {\n  constructor(gl) {\n    let {\n      width = 1,\n      height = 1,\n      widthSegments = 1,\n      heightSegments = 1,\n      attributes = {}\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const wSegs = widthSegments;\n    const hSegs = heightSegments;\n\n    // Determine length of arrays\n    const num = (wSegs + 1) * (hSegs + 1);\n    const numIndices = wSegs * hSegs * 6;\n\n    // Generate empty arrays once\n    const position = new Float32Array(num * 3);\n    const normal = new Float32Array(num * 3);\n    const uv = new Float32Array(num * 2);\n    const index = numIndices > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n    Plane.buildPlane(position, normal, uv, index, width, height, 0, wSegs, hSegs);\n    Object.assign(attributes, {\n      position: {\n        size: 3,\n        data: position\n      },\n      normal: {\n        size: 3,\n        data: normal\n      },\n      uv: {\n        size: 2,\n        data: uv\n      },\n      index: {\n        data: index\n      }\n    });\n    super(gl, attributes);\n  }\n  static buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs) {\n    let u = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let v = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;\n    let w = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 2;\n    let uDir = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 1;\n    let vDir = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : -1;\n    let i = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;\n    let ii = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 0;\n    const io = i;\n    const segW = width / wSegs;\n    const segH = height / hSegs;\n    for (let iy = 0; iy <= hSegs; iy++) {\n      let y = iy * segH - height / 2;\n      for (let ix = 0; ix <= wSegs; ix++, i++) {\n        let x = ix * segW - width / 2;\n        position[i * 3 + u] = x * uDir;\n        position[i * 3 + v] = y * vDir;\n        position[i * 3 + w] = depth / 2;\n        normal[i * 3 + u] = 0;\n        normal[i * 3 + v] = 0;\n        normal[i * 3 + w] = depth >= 0 ? 1 : -1;\n        uv[i * 2] = ix / wSegs;\n        uv[i * 2 + 1] = 1 - iy / hSegs;\n        if (iy === hSegs || ix === wSegs) continue;\n        let a = io + ix + iy * (wSegs + 1);\n        let b = io + ix + (iy + 1) * (wSegs + 1);\n        let c = io + ix + (iy + 1) * (wSegs + 1) + 1;\n        let d = io + ix + iy * (wSegs + 1) + 1;\n        index[ii * 6] = a;\n        index[ii * 6 + 1] = b;\n        index[ii * 6 + 2] = d;\n        index[ii * 6 + 3] = b;\n        index[ii * 6 + 4] = c;\n        index[ii * 6 + 5] = d;\n        ii++;\n      }\n    }\n  }\n}","map":{"version":3,"names":["Geometry","Plane","constructor","gl","width","height","widthSegments","heightSegments","attributes","arguments","length","undefined","wSegs","hSegs","num","numIndices","position","Float32Array","normal","uv","index","Uint32Array","Uint16Array","buildPlane","Object","assign","size","data","depth","u","v","w","uDir","vDir","i","ii","io","segW","segH","iy","y","ix","x","a","b","c","d"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/extras/Plane.js"],"sourcesContent":["import { Geometry } from '../core/Geometry.js';\n\nexport class Plane extends Geometry {\n    constructor(gl, { width = 1, height = 1, widthSegments = 1, heightSegments = 1, attributes = {} } = {}) {\n        const wSegs = widthSegments;\n        const hSegs = heightSegments;\n\n        // Determine length of arrays\n        const num = (wSegs + 1) * (hSegs + 1);\n        const numIndices = wSegs * hSegs * 6;\n\n        // Generate empty arrays once\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = numIndices > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        Plane.buildPlane(position, normal, uv, index, width, height, 0, wSegs, hSegs);\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n\n    static buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, u = 0, v = 1, w = 2, uDir = 1, vDir = -1, i = 0, ii = 0) {\n        const io = i;\n        const segW = width / wSegs;\n        const segH = height / hSegs;\n\n        for (let iy = 0; iy <= hSegs; iy++) {\n            let y = iy * segH - height / 2;\n            for (let ix = 0; ix <= wSegs; ix++, i++) {\n                let x = ix * segW - width / 2;\n\n                position[i * 3 + u] = x * uDir;\n                position[i * 3 + v] = y * vDir;\n                position[i * 3 + w] = depth / 2;\n\n                normal[i * 3 + u] = 0;\n                normal[i * 3 + v] = 0;\n                normal[i * 3 + w] = depth >= 0 ? 1 : -1;\n\n                uv[i * 2] = ix / wSegs;\n                uv[i * 2 + 1] = 1 - iy / hSegs;\n\n                if (iy === hSegs || ix === wSegs) continue;\n                let a = io + ix + iy * (wSegs + 1);\n                let b = io + ix + (iy + 1) * (wSegs + 1);\n                let c = io + ix + (iy + 1) * (wSegs + 1) + 1;\n                let d = io + ix + iy * (wSegs + 1) + 1;\n\n                index[ii * 6] = a;\n                index[ii * 6 + 1] = b;\n                index[ii * 6 + 2] = d;\n                index[ii * 6 + 3] = b;\n                index[ii * 6 + 4] = c;\n                index[ii * 6 + 5] = d;\n                ii++;\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}