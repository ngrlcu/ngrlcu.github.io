{"ast":null,"code":"const EPSILON = 0.000001;\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1],\n      a02 = a[2],\n      a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0],\n    a01 = a[1],\n    a02 = a[2];\n  let a10 = a[3],\n    a11 = a[4],\n    a12 = a[5];\n  let a20 = a[6],\n    a21 = a[7],\n    a22 = a[8];\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0],\n    a01 = a[1],\n    a02 = a[2];\n  let a10 = a[3],\n    a11 = a[4],\n    a12 = a[5];\n  let a20 = a[6],\n    a21 = a[7],\n    a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0],\n    a01 = a[1],\n    a02 = a[2];\n  let a10 = a[3],\n    a11 = a[4],\n    a12 = a[5];\n  let a20 = a[6],\n    a21 = a[7],\n    a22 = a[8];\n  let b00 = b[0],\n    b01 = b[1],\n    b02 = b[2];\n  let b10 = b[3],\n    b11 = b[4],\n    b12 = b[5];\n  let b20 = b[6],\n    b21 = b[7],\n    b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a10 = a[3],\n    a11 = a[4],\n    a12 = a[5],\n    a20 = a[6],\n    a21 = a[7],\n    a22 = a[8],\n    x = v[0],\n    y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a10 = a[3],\n    a11 = a[4],\n    a12 = a[5],\n    a20 = a[6],\n    a21 = a[7],\n    a22 = a[8],\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0],\n    y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n  let a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  let a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  let a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  let a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}","map":{"version":3,"names":["EPSILON","fromMat4","out","a","fromQuat","q","x","y","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","copy","set","m00","m01","m02","m10","m11","m12","m20","m21","m22","identity","transpose","a01","a02","a12","invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","det","determinant","multiply","b","b00","b02","b10","b12","b20","b22","translate","v","rotate","rad","s","Math","sin","c","cos","scale","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","add","subtract","multiplyScalar"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/math/functions/Mat3Func.js"],"sourcesContent":["const EPSILON = 0.000001;\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b00 = b[0],\n        b01 = b[1],\n        b02 = b[2];\n    let b10 = b[3],\n        b11 = b[4],\n        b12 = b[5];\n    let b20 = b[6],\n        b21 = b[7],\n        b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        x = v[0],\n        y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}