{"ast":null,"code":"import { Texture } from './Texture.js';\nexport class RenderTarget {\n  constructor(gl) {\n    let {\n      width = gl.canvas.width,\n      height = gl.canvas.height,\n      target = gl.FRAMEBUFFER,\n      color = 1,\n      // number of color attachments\n      depth = true,\n      stencil = false,\n      depthTexture = false,\n      wrapS = gl.CLAMP_TO_EDGE,\n      wrapT = gl.CLAMP_TO_EDGE,\n      wrapR = gl.CLAMP_TO_EDGE,\n      minFilter = gl.LINEAR,\n      magFilter = minFilter,\n      type = gl.UNSIGNED_BYTE,\n      format = gl.RGBA,\n      internalFormat = format,\n      unpackAlignment,\n      premultiplyAlpha\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.gl = gl;\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.stencil = stencil;\n    this.buffer = this.gl.createFramebuffer();\n    this.target = target;\n    this.gl.renderer.bindFramebuffer(this);\n    this.textures = [];\n    const drawBuffers = [];\n\n    // create and attach required num of color textures\n    for (let i = 0; i < color; i++) {\n      this.textures.push(new Texture(gl, {\n        width,\n        height,\n        wrapS,\n        wrapT,\n        wrapR,\n        minFilter,\n        magFilter,\n        type,\n        format,\n        internalFormat,\n        unpackAlignment,\n        premultiplyAlpha,\n        flipY: false,\n        generateMipmaps: false\n      }));\n      this.textures[i].update();\n      this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\n      drawBuffers.push(this.gl.COLOR_ATTACHMENT0 + i);\n    }\n\n    // For multi-render targets shader access\n    if (drawBuffers.length > 1) this.gl.renderer.drawBuffers(drawBuffers);\n\n    // alias for majority of use cases\n    this.texture = this.textures[0];\n\n    // note depth textures break stencil - so can't use together\n    if (depthTexture && (this.gl.renderer.isWebgl2 || this.gl.renderer.getExtension('WEBGL_depth_texture'))) {\n      this.depthTexture = new Texture(gl, {\n        width,\n        height,\n        minFilter: this.gl.NEAREST,\n        magFilter: this.gl.NEAREST,\n        format: this.stencil ? this.gl.DEPTH_STENCIL : this.gl.DEPTH_COMPONENT,\n        internalFormat: gl.renderer.isWebgl2 ? this.stencil ? this.gl.DEPTH24_STENCIL8 : this.gl.DEPTH_COMPONENT16 : this.gl.DEPTH_COMPONENT,\n        type: this.stencil ? this.gl.UNSIGNED_INT_24_8 : this.gl.UNSIGNED_INT\n      });\n      this.depthTexture.update();\n      this.gl.framebufferTexture2D(this.target, this.stencil ? this.gl.DEPTH_STENCIL_ATTACHMENT : this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\n    } else {\n      // Render buffers\n      if (depth && !stencil) {\n        this.depthBuffer = this.gl.createRenderbuffer();\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n        this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.depthBuffer);\n      }\n      if (stencil && !depth) {\n        this.stencilBuffer = this.gl.createRenderbuffer();\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\n        this.gl.framebufferRenderbuffer(this.target, this.gl.STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.stencilBuffer);\n      }\n      if (depth && stencil) {\n        this.depthStencilBuffer = this.gl.createRenderbuffer();\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\n        this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.depthStencilBuffer);\n      }\n    }\n    this.gl.renderer.bindFramebuffer({\n      target: this.target\n    });\n  }\n  setSize(width, height) {\n    if (this.width === width && this.height === height) return;\n    this.width = width;\n    this.height = height;\n    this.gl.renderer.bindFramebuffer(this);\n    for (let i = 0; i < this.textures.length; i++) {\n      this.textures[i].width = width;\n      this.textures[i].height = height;\n      this.textures[i].needsUpdate = true;\n      this.textures[i].update();\n      this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\n    }\n    if (this.depthTexture) {\n      this.depthTexture.width = width;\n      this.depthTexture.height = height;\n      this.depthTexture.needsUpdate = true;\n      this.depthTexture.update();\n      this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\n    } else {\n      if (this.depthBuffer) {\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n      }\n      if (this.stencilBuffer) {\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\n      }\n      if (this.depthStencilBuffer) {\n        this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\n        this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\n      }\n    }\n    this.gl.renderer.bindFramebuffer({\n      target: this.target\n    });\n  }\n}","map":{"version":3,"names":["Texture","RenderTarget","constructor","gl","width","canvas","height","target","FRAMEBUFFER","color","depth","stencil","depthTexture","wrapS","CLAMP_TO_EDGE","wrapT","wrapR","minFilter","LINEAR","magFilter","type","UNSIGNED_BYTE","format","RGBA","internalFormat","unpackAlignment","premultiplyAlpha","arguments","length","undefined","buffer","createFramebuffer","renderer","bindFramebuffer","textures","drawBuffers","i","push","flipY","generateMipmaps","update","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","texture","isWebgl2","getExtension","NEAREST","DEPTH_STENCIL","DEPTH_COMPONENT","DEPTH24_STENCIL8","DEPTH_COMPONENT16","UNSIGNED_INT_24_8","UNSIGNED_INT","DEPTH_STENCIL_ATTACHMENT","DEPTH_ATTACHMENT","depthBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","stencilBuffer","STENCIL_INDEX8","STENCIL_ATTACHMENT","depthStencilBuffer","setSize","needsUpdate"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/core/RenderTarget.js"],"sourcesContent":["import { Texture } from './Texture.js'\n\nexport class RenderTarget {\n    constructor(\n        gl,\n        {\n            width = gl.canvas.width,\n            height = gl.canvas.height,\n            target = gl.FRAMEBUFFER,\n            color = 1, // number of color attachments\n            depth = true,\n            stencil = false,\n            depthTexture = false,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            wrapR = gl.CLAMP_TO_EDGE,\n            minFilter = gl.LINEAR,\n            magFilter = minFilter,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            unpackAlignment,\n            premultiplyAlpha,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.buffer = this.gl.createFramebuffer();\n        this.target = target;\n        this.gl.renderer.bindFramebuffer(this);\n\n        this.textures = [];\n        const drawBuffers = [];\n\n        // create and attach required num of color textures\n        for (let i = 0; i < color; i++) {\n            this.textures.push(\n                new Texture(gl, {\n                    width,\n                    height,\n                    wrapS,\n                    wrapT,\n                    wrapR,\n                    minFilter,\n                    magFilter,\n                    type,\n                    format,\n                    internalFormat,\n                    unpackAlignment,\n                    premultiplyAlpha,\n                    flipY: false,\n                    generateMipmaps: false,\n                })\n            );\n            this.textures[i].update();\n            this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\n            drawBuffers.push(this.gl.COLOR_ATTACHMENT0 + i);\n        }\n\n        // For multi-render targets shader access\n        if (drawBuffers.length > 1) this.gl.renderer.drawBuffers(drawBuffers);\n\n        // alias for majority of use cases\n        this.texture = this.textures[0];\n\n        // note depth textures break stencil - so can't use together\n        if (depthTexture && (this.gl.renderer.isWebgl2 || this.gl.renderer.getExtension('WEBGL_depth_texture'))) {\n            this.depthTexture = new Texture(gl, {\n                width,\n                height,\n                minFilter: this.gl.NEAREST,\n                magFilter: this.gl.NEAREST,\n                format: this.stencil ? this.gl.DEPTH_STENCIL : this.gl.DEPTH_COMPONENT,\n                internalFormat: gl.renderer.isWebgl2 ? (this.stencil ? this.gl.DEPTH24_STENCIL8 : this.gl.DEPTH_COMPONENT16) : this.gl.DEPTH_COMPONENT,\n                type: this.stencil ? this.gl.UNSIGNED_INT_24_8 : this.gl.UNSIGNED_INT,\n            });\n            this.depthTexture.update();\n            this.gl.framebufferTexture2D(this.target, this.stencil ? this.gl.DEPTH_STENCIL_ATTACHMENT : this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\n        } else {\n            // Render buffers\n            if (depth && !stencil) {\n                this.depthBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.RENDERBUFFER, this.depthBuffer);\n            }\n\n            if (stencil && !depth) {\n                this.stencilBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.stencilBuffer);\n            }\n\n            if (depth && stencil) {\n                this.depthStencilBuffer = this.gl.createRenderbuffer();\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\n                this.gl.framebufferRenderbuffer(this.target, this.gl.DEPTH_STENCIL_ATTACHMENT, this.gl.RENDERBUFFER, this.depthStencilBuffer);\n            }\n        }\n\n        this.gl.renderer.bindFramebuffer({ target: this.target });\n    }\n\n    setSize(width, height) {\n        if (this.width === width && this.height === height) return;\n\n        this.width = width;\n        this.height = height;\n        this.gl.renderer.bindFramebuffer(this);\n\n        for (let i = 0; i < this.textures.length; i++) {\n            this.textures[i].width = width;\n            this.textures[i].height = height;\n            this.textures[i].needsUpdate = true;\n            this.textures[i].update();\n            this.gl.framebufferTexture2D(this.target, this.gl.COLOR_ATTACHMENT0 + i, this.gl.TEXTURE_2D, this.textures[i].texture, 0 /* level */);\n        }\n\n        if (this.depthTexture) {\n            this.depthTexture.width = width;\n            this.depthTexture.height = height;\n            this.depthTexture.needsUpdate = true;\n            this.depthTexture.update();\n            this.gl.framebufferTexture2D(this.target, this.gl.DEPTH_ATTACHMENT, this.gl.TEXTURE_2D, this.depthTexture.texture, 0 /* level */);\n        } else {\n            if (this.depthBuffer) {\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_COMPONENT16, width, height);\n            }\n\n            if (this.stencilBuffer) {\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.stencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.STENCIL_INDEX8, width, height);\n            }\n\n            if (this.depthStencilBuffer) {\n                this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.depthStencilBuffer);\n                this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, width, height);\n            }\n        }\n\n        this.gl.renderer.bindFramebuffer({ target: this.target });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}