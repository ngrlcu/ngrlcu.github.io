{"ast":null,"code":"import { Mesh } from '../core/Mesh.js';\nimport { Transform } from '../core/Transform.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Texture } from '../core/Texture.js';\nimport { Animation } from './Animation.js';\nconst tempMat4 = /* @__PURE__ */new Mat4();\nexport class Skin extends Mesh {\n  constructor(gl) {\n    let {\n      rig,\n      geometry,\n      program,\n      mode = gl.TRIANGLES\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(gl, {\n      geometry,\n      program,\n      mode\n    });\n    this.createBones(rig);\n    this.createBoneTexture();\n    this.animations = [];\n    Object.assign(this.program.uniforms, {\n      boneTexture: {\n        value: this.boneTexture\n      },\n      boneTextureSize: {\n        value: this.boneTextureSize\n      }\n    });\n  }\n  createBones(rig) {\n    // Create root so that can simply update world matrix of whole skeleton\n    this.root = new Transform();\n\n    // Create bones\n    this.bones = [];\n    if (!rig.bones || !rig.bones.length) return;\n    for (let i = 0; i < rig.bones.length; i++) {\n      const bone = new Transform();\n\n      // Set initial values (bind pose)\n      bone.position.fromArray(rig.bindPose.position, i * 3);\n      bone.quaternion.fromArray(rig.bindPose.quaternion, i * 4);\n      bone.scale.fromArray(rig.bindPose.scale, i * 3);\n      this.bones.push(bone);\n    }\n\n    // Once created, set the hierarchy\n    rig.bones.forEach((data, i) => {\n      this.bones[i].name = data.name;\n      if (data.parent === -1) return this.bones[i].setParent(this.root);\n      this.bones[i].setParent(this.bones[data.parent]);\n    });\n\n    // Then update to calculate world matrices\n    this.root.updateMatrixWorld(true);\n\n    // Store inverse of bind pose to calculate differences\n    this.bones.forEach(bone => {\n      bone.bindInverse = new Mat4(...bone.worldMatrix).inverse();\n    });\n  }\n  createBoneTexture() {\n    if (!this.bones.length) return;\n    const size = Math.max(4, Math.pow(2, Math.ceil(Math.log(Math.sqrt(this.bones.length * 4)) / Math.LN2)));\n    this.boneMatrices = new Float32Array(size * size * 4);\n    this.boneTextureSize = size;\n    this.boneTexture = new Texture(this.gl, {\n      image: this.boneMatrices,\n      generateMipmaps: false,\n      type: this.gl.FLOAT,\n      internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA32F : this.gl.RGBA,\n      minFilter: this.gl.NEAREST,\n      magFilter: this.gl.NEAREST,\n      flipY: false,\n      width: size\n    });\n  }\n  addAnimation(data) {\n    const animation = new Animation({\n      objects: this.bones,\n      data\n    });\n    this.animations.push(animation);\n    return animation;\n  }\n  update() {\n    // Calculate combined animation weight\n    let total = 0;\n    this.animations.forEach(animation => total += animation.weight);\n    this.animations.forEach((animation, i) => {\n      // force first animation to set in order to reset frame\n      animation.update(total, i === 0);\n    });\n  }\n  draw() {\n    let {\n      camera\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Update world matrices manually, as not part of scene graph\n    this.root.updateMatrixWorld(true);\n\n    // Update bone texture\n    this.bones.forEach((bone, i) => {\n      // Find difference between current and bind pose\n      tempMat4.multiply(bone.worldMatrix, bone.bindInverse);\n      this.boneMatrices.set(tempMat4, i * 16);\n    });\n    if (this.boneTexture) this.boneTexture.needsUpdate = true;\n    super.draw({\n      camera\n    });\n  }\n}","map":{"version":3,"names":["Mesh","Transform","Mat4","Texture","Animation","tempMat4","Skin","constructor","gl","rig","geometry","program","mode","TRIANGLES","arguments","length","undefined","createBones","createBoneTexture","animations","Object","assign","uniforms","boneTexture","value","boneTextureSize","root","bones","i","bone","position","fromArray","bindPose","quaternion","scale","push","forEach","data","name","parent","setParent","updateMatrixWorld","bindInverse","worldMatrix","inverse","size","Math","max","pow","ceil","log","sqrt","LN2","boneMatrices","Float32Array","image","generateMipmaps","type","FLOAT","internalFormat","renderer","isWebgl2","RGBA32F","RGBA","minFilter","NEAREST","magFilter","flipY","width","addAnimation","animation","objects","update","total","weight","draw","camera","multiply","set","needsUpdate"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/extras/Skin.js"],"sourcesContent":["import { Mesh } from '../core/Mesh.js';\nimport { Transform } from '../core/Transform.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Texture } from '../core/Texture.js';\nimport { Animation } from './Animation.js';\n\nconst tempMat4 = /* @__PURE__ */ new Mat4();\n\nexport class Skin extends Mesh {\n    constructor(gl, { rig, geometry, program, mode = gl.TRIANGLES } = {}) {\n        super(gl, { geometry, program, mode });\n\n        this.createBones(rig);\n        this.createBoneTexture();\n        this.animations = [];\n\n        Object.assign(this.program.uniforms, {\n            boneTexture: { value: this.boneTexture },\n            boneTextureSize: { value: this.boneTextureSize },\n        });\n    }\n\n    createBones(rig) {\n        // Create root so that can simply update world matrix of whole skeleton\n        this.root = new Transform();\n\n        // Create bones\n        this.bones = [];\n        if (!rig.bones || !rig.bones.length) return;\n        for (let i = 0; i < rig.bones.length; i++) {\n            const bone = new Transform();\n\n            // Set initial values (bind pose)\n            bone.position.fromArray(rig.bindPose.position, i * 3);\n            bone.quaternion.fromArray(rig.bindPose.quaternion, i * 4);\n            bone.scale.fromArray(rig.bindPose.scale, i * 3);\n\n            this.bones.push(bone);\n        }\n\n        // Once created, set the hierarchy\n        rig.bones.forEach((data, i) => {\n            this.bones[i].name = data.name;\n            if (data.parent === -1) return this.bones[i].setParent(this.root);\n            this.bones[i].setParent(this.bones[data.parent]);\n        });\n\n        // Then update to calculate world matrices\n        this.root.updateMatrixWorld(true);\n\n        // Store inverse of bind pose to calculate differences\n        this.bones.forEach((bone) => {\n            bone.bindInverse = new Mat4(...bone.worldMatrix).inverse();\n        });\n    }\n\n    createBoneTexture() {\n        if (!this.bones.length) return;\n        const size = Math.max(4, Math.pow(2, Math.ceil(Math.log(Math.sqrt(this.bones.length * 4)) / Math.LN2)));\n        this.boneMatrices = new Float32Array(size * size * 4);\n        this.boneTextureSize = size;\n        this.boneTexture = new Texture(this.gl, {\n            image: this.boneMatrices,\n            generateMipmaps: false,\n            type: this.gl.FLOAT,\n            internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA32F : this.gl.RGBA,\n            minFilter: this.gl.NEAREST,\n            magFilter: this.gl.NEAREST,\n            flipY: false,\n            width: size,\n        });\n    }\n\n    addAnimation(data) {\n        const animation = new Animation({ objects: this.bones, data });\n        this.animations.push(animation);\n        return animation;\n    }\n\n    update() {\n        // Calculate combined animation weight\n        let total = 0;\n        this.animations.forEach((animation) => (total += animation.weight));\n\n        this.animations.forEach((animation, i) => {\n            // force first animation to set in order to reset frame\n            animation.update(total, i === 0);\n        });\n    }\n\n    draw({ camera } = {}) {\n        // Update world matrices manually, as not part of scene graph\n        this.root.updateMatrixWorld(true);\n\n        // Update bone texture\n        this.bones.forEach((bone, i) => {\n            // Find difference between current and bind pose\n            tempMat4.multiply(bone.worldMatrix, bone.bindInverse);\n            this.boneMatrices.set(tempMat4, i * 16);\n        });\n        if (this.boneTexture) this.boneTexture.needsUpdate = true;\n\n        super.draw({ camera });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}