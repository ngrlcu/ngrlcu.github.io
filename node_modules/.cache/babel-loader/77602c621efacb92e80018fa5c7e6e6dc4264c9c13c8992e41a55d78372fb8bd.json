{"ast":null,"code":"// TODO: barycentric code shouldn't be here, but where?\n// TODO: SphereCast?\n\nimport { Vec2 } from '../math/Vec2.js';\nimport { Vec3 } from '../math/Vec3.js';\nimport { Mat4 } from '../math/Mat4.js';\nconst tempVec2a = /* @__PURE__ */new Vec2();\nconst tempVec2b = /* @__PURE__ */new Vec2();\nconst tempVec2c = /* @__PURE__ */new Vec2();\nconst tempVec3a = /* @__PURE__ */new Vec3();\nconst tempVec3b = /* @__PURE__ */new Vec3();\nconst tempVec3c = /* @__PURE__ */new Vec3();\nconst tempVec3d = /* @__PURE__ */new Vec3();\nconst tempVec3e = /* @__PURE__ */new Vec3();\nconst tempVec3f = /* @__PURE__ */new Vec3();\nconst tempVec3g = /* @__PURE__ */new Vec3();\nconst tempVec3h = /* @__PURE__ */new Vec3();\nconst tempVec3i = /* @__PURE__ */new Vec3();\nconst tempVec3j = /* @__PURE__ */new Vec3();\nconst tempVec3k = /* @__PURE__ */new Vec3();\nconst tempMat4 = /* @__PURE__ */new Mat4();\nexport class Raycast {\n  constructor() {\n    this.origin = new Vec3();\n    this.direction = new Vec3();\n  }\n\n  // Set ray from mouse unprojection\n  castMouse(camera) {\n    let mouse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0];\n    if (camera.type === 'orthographic') {\n      // Set origin\n      // Since camera is orthographic, origin is not the camera position\n      const {\n        left,\n        right,\n        bottom,\n        top,\n        zoom\n      } = camera;\n      const x = left / zoom + (right - left) / zoom * (mouse[0] * 0.5 + 0.5);\n      const y = bottom / zoom + (top - bottom) / zoom * (mouse[1] * 0.5 + 0.5);\n      this.origin.set(x, y, 0);\n      this.origin.applyMatrix4(camera.worldMatrix);\n\n      // Set direction\n      // https://community.khronos.org/t/get-direction-from-transformation-matrix-or-quat/65502/2\n      this.direction.x = -camera.worldMatrix[8];\n      this.direction.y = -camera.worldMatrix[9];\n      this.direction.z = -camera.worldMatrix[10];\n    } else {\n      // Set origin\n      camera.worldMatrix.getTranslation(this.origin);\n\n      // Set direction\n      this.direction.set(mouse[0], mouse[1], 0.5);\n      camera.unproject(this.direction);\n      this.direction.sub(this.origin).normalize();\n    }\n  }\n  intersectBounds(meshes) {\n    let {\n      maxDistance,\n      output = []\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!Array.isArray(meshes)) meshes = [meshes];\n    const invWorldMat4 = tempMat4;\n    const origin = tempVec3a;\n    const direction = tempVec3b;\n    const hits = output;\n    hits.length = 0;\n    meshes.forEach(mesh => {\n      // Create bounds\n      if (!mesh.geometry.bounds || mesh.geometry.bounds.radius === Infinity) mesh.geometry.computeBoundingSphere();\n      const bounds = mesh.geometry.bounds;\n      invWorldMat4.inverse(mesh.worldMatrix);\n\n      // Get max distance locally\n      let localMaxDistance;\n      if (maxDistance) {\n        direction.copy(this.direction).scaleRotateMatrix4(invWorldMat4);\n        localMaxDistance = maxDistance * direction.len();\n      }\n\n      // Take world space ray and make it object space to align with bounding box\n      origin.copy(this.origin).applyMatrix4(invWorldMat4);\n      direction.copy(this.direction).transformDirection(invWorldMat4);\n\n      // Break out early if bounds too far away from origin\n      if (maxDistance) {\n        if (origin.distance(bounds.center) - bounds.radius > localMaxDistance) return;\n      }\n      let localDistance = 0;\n\n      // Check origin isn't inside bounds before testing intersection\n      if (mesh.geometry.raycast === 'sphere') {\n        if (origin.distance(bounds.center) > bounds.radius) {\n          localDistance = this.intersectSphere(bounds, origin, direction);\n          if (!localDistance) return;\n        }\n      } else {\n        if (origin.x < bounds.min.x || origin.x > bounds.max.x || origin.y < bounds.min.y || origin.y > bounds.max.y || origin.z < bounds.min.z || origin.z > bounds.max.z) {\n          localDistance = this.intersectBox(bounds, origin, direction);\n          if (!localDistance) return;\n        }\n      }\n      if (maxDistance && localDistance > localMaxDistance) return;\n\n      // Create object on mesh to avoid generating lots of objects\n      if (!mesh.hit) mesh.hit = {\n        localPoint: new Vec3(),\n        point: new Vec3()\n      };\n      mesh.hit.localPoint.copy(direction).multiply(localDistance).add(origin);\n      mesh.hit.point.copy(mesh.hit.localPoint).applyMatrix4(mesh.worldMatrix);\n      mesh.hit.distance = mesh.hit.point.distance(this.origin);\n      hits.push(mesh);\n    });\n    hits.sort((a, b) => a.hit.distance - b.hit.distance);\n    return hits;\n  }\n  intersectMeshes(meshes) {\n    let {\n      cullFace = true,\n      maxDistance,\n      includeUV = true,\n      includeNormal = true,\n      output = []\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Test bounds first before testing geometry\n    const hits = this.intersectBounds(meshes, {\n      maxDistance,\n      output\n    });\n    if (!hits.length) return hits;\n    const invWorldMat4 = tempMat4;\n    const origin = tempVec3a;\n    const direction = tempVec3b;\n    const a = tempVec3c;\n    const b = tempVec3d;\n    const c = tempVec3e;\n    const closestFaceNormal = tempVec3f;\n    const faceNormal = tempVec3g;\n    const barycoord = tempVec3h;\n    const uvA = tempVec2a;\n    const uvB = tempVec2b;\n    const uvC = tempVec2c;\n    for (let i = hits.length - 1; i >= 0; i--) {\n      const mesh = hits[i];\n      invWorldMat4.inverse(mesh.worldMatrix);\n\n      // Get max distance locally\n      let localMaxDistance;\n      if (maxDistance) {\n        direction.copy(this.direction).scaleRotateMatrix4(invWorldMat4);\n        localMaxDistance = maxDistance * direction.len();\n      }\n\n      // Take world space ray and make it object space to align with bounding box\n      origin.copy(this.origin).applyMatrix4(invWorldMat4);\n      direction.copy(this.direction).transformDirection(invWorldMat4);\n      let localDistance = 0;\n      let closestA, closestB, closestC;\n      const geometry = mesh.geometry;\n      const attributes = geometry.attributes;\n      const index = attributes.index;\n      const position = attributes.position;\n      const start = Math.max(0, geometry.drawRange.start);\n      const end = Math.min(index ? index.count : position.count, geometry.drawRange.start + geometry.drawRange.count);\n      // Data loaded shouldn't haave stride, only buffers\n      // const stride = position.stride ? position.stride / position.data.BYTES_PER_ELEMENT : position.size;\n      const stride = position.size;\n      for (let j = start; j < end; j += 3) {\n        // Position attribute indices for each triangle\n        const ai = index ? index.data[j] : j;\n        const bi = index ? index.data[j + 1] : j + 1;\n        const ci = index ? index.data[j + 2] : j + 2;\n        a.fromArray(position.data, ai * stride);\n        b.fromArray(position.data, bi * stride);\n        c.fromArray(position.data, ci * stride);\n        const distance = this.intersectTriangle(a, b, c, cullFace, origin, direction, faceNormal);\n        if (!distance) continue;\n\n        // Too far away\n        if (maxDistance && distance > localMaxDistance) continue;\n        if (!localDistance || distance < localDistance) {\n          localDistance = distance;\n          closestA = ai;\n          closestB = bi;\n          closestC = ci;\n          closestFaceNormal.copy(faceNormal);\n        }\n      }\n      if (!localDistance) hits.splice(i, 1);\n\n      // Update hit values from bounds-test\n      mesh.hit.localPoint.copy(direction).multiply(localDistance).add(origin);\n      mesh.hit.point.copy(mesh.hit.localPoint).applyMatrix4(mesh.worldMatrix);\n      mesh.hit.distance = mesh.hit.point.distance(this.origin);\n\n      // Add unique hit objects on mesh to avoid generating lots of objects\n      if (!mesh.hit.faceNormal) {\n        mesh.hit.localFaceNormal = new Vec3();\n        mesh.hit.faceNormal = new Vec3();\n        mesh.hit.uv = new Vec2();\n        mesh.hit.localNormal = new Vec3();\n        mesh.hit.normal = new Vec3();\n      }\n\n      // Add face normal data which is already computed\n      mesh.hit.localFaceNormal.copy(closestFaceNormal);\n      mesh.hit.faceNormal.copy(mesh.hit.localFaceNormal).transformDirection(mesh.worldMatrix);\n\n      // Optional data, opt out to optimise a bit if necessary\n      if (includeUV || includeNormal) {\n        // Calculate barycoords to find uv values at hit point\n        a.fromArray(position.data, closestA * 3);\n        b.fromArray(position.data, closestB * 3);\n        c.fromArray(position.data, closestC * 3);\n        this.getBarycoord(mesh.hit.localPoint, a, b, c, barycoord);\n      }\n      if (includeUV && attributes.uv) {\n        uvA.fromArray(attributes.uv.data, closestA * 2);\n        uvB.fromArray(attributes.uv.data, closestB * 2);\n        uvC.fromArray(attributes.uv.data, closestC * 2);\n        mesh.hit.uv.set(uvA.x * barycoord.x + uvB.x * barycoord.y + uvC.x * barycoord.z, uvA.y * barycoord.x + uvB.y * barycoord.y + uvC.y * barycoord.z);\n      }\n      if (includeNormal && attributes.normal) {\n        a.fromArray(attributes.normal.data, closestA * 3);\n        b.fromArray(attributes.normal.data, closestB * 3);\n        c.fromArray(attributes.normal.data, closestC * 3);\n        mesh.hit.localNormal.set(a.x * barycoord.x + b.x * barycoord.y + c.x * barycoord.z, a.y * barycoord.x + b.y * barycoord.y + c.y * barycoord.z, a.z * barycoord.x + b.z * barycoord.y + c.z * barycoord.z);\n        mesh.hit.normal.copy(mesh.hit.localNormal).transformDirection(mesh.worldMatrix);\n      }\n    }\n    hits.sort((a, b) => a.hit.distance - b.hit.distance);\n    return hits;\n  }\n  intersectPlane(plane) {\n    let origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.origin;\n    let direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.direction;\n    const xminp = tempVec3a;\n    xminp.sub(plane.origin, origin);\n    const a = xminp.dot(plane.normal);\n    const b = direction.dot(plane.normal);\n    // Assuming we don't want to count a ray parallel to the plane as intersecting\n    if (b == 0) return 0;\n    const delta = a / b;\n    if (delta <= 0) return 0;\n    return origin.add(direction.scale(delta));\n  }\n  intersectSphere(sphere) {\n    let origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.origin;\n    let direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.direction;\n    const ray = tempVec3c;\n    ray.sub(sphere.center, origin);\n    const tca = ray.dot(direction);\n    const d2 = ray.dot(ray) - tca * tca;\n    const radius2 = sphere.radius * sphere.radius;\n    if (d2 > radius2) return 0;\n    const thc = Math.sqrt(radius2 - d2);\n    const t0 = tca - thc;\n    const t1 = tca + thc;\n    if (t0 < 0 && t1 < 0) return 0;\n    if (t0 < 0) return t1;\n    return t0;\n  }\n\n  // Ray AABB - Ray Axis aligned bounding box testing\n  intersectBox(box) {\n    let origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.origin;\n    let direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.direction;\n    let tmin, tmax, tYmin, tYmax, tZmin, tZmax;\n    const invdirx = 1 / direction.x;\n    const invdiry = 1 / direction.y;\n    const invdirz = 1 / direction.z;\n    const min = box.min;\n    const max = box.max;\n    tmin = ((invdirx >= 0 ? min.x : max.x) - origin.x) * invdirx;\n    tmax = ((invdirx >= 0 ? max.x : min.x) - origin.x) * invdirx;\n    tYmin = ((invdiry >= 0 ? min.y : max.y) - origin.y) * invdiry;\n    tYmax = ((invdiry >= 0 ? max.y : min.y) - origin.y) * invdiry;\n    if (tmin > tYmax || tYmin > tmax) return 0;\n    if (tYmin > tmin) tmin = tYmin;\n    if (tYmax < tmax) tmax = tYmax;\n    tZmin = ((invdirz >= 0 ? min.z : max.z) - origin.z) * invdirz;\n    tZmax = ((invdirz >= 0 ? max.z : min.z) - origin.z) * invdirz;\n    if (tmin > tZmax || tZmin > tmax) return 0;\n    if (tZmin > tmin) tmin = tZmin;\n    if (tZmax < tmax) tmax = tZmax;\n    if (tmax < 0) return 0;\n    return tmin >= 0 ? tmin : tmax;\n  }\n  intersectTriangle(a, b, c) {\n    let backfaceCulling = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let origin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.origin;\n    let direction = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.direction;\n    let normal = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : tempVec3g;\n    // from https://github.com/mrdoob/three.js/blob/master/src/math/Ray.js\n    // which is from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n    const edge1 = tempVec3h;\n    const edge2 = tempVec3i;\n    const diff = tempVec3j;\n    edge1.sub(b, a);\n    edge2.sub(c, a);\n    normal.cross(edge1, edge2);\n    let DdN = direction.dot(normal);\n    if (!DdN) return 0;\n    let sign;\n    if (DdN > 0) {\n      if (backfaceCulling) return 0;\n      sign = 1;\n    } else {\n      sign = -1;\n      DdN = -DdN;\n    }\n    diff.sub(origin, a);\n    let DdQxE2 = sign * direction.dot(edge2.cross(diff, edge2));\n    if (DdQxE2 < 0) return 0;\n    let DdE1xQ = sign * direction.dot(edge1.cross(diff));\n    if (DdE1xQ < 0) return 0;\n    if (DdQxE2 + DdE1xQ > DdN) return 0;\n    let QdN = -sign * diff.dot(normal);\n    if (QdN < 0) return 0;\n    return QdN / DdN;\n  }\n  getBarycoord(point, a, b, c) {\n    let target = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : tempVec3h;\n    // From https://github.com/mrdoob/three.js/blob/master/src/math/Triangle.js\n    // static/instance method to calculate barycentric coordinates\n    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n    const v0 = tempVec3i;\n    const v1 = tempVec3j;\n    const v2 = tempVec3k;\n    v0.sub(c, a);\n    v1.sub(b, a);\n    v2.sub(point, a);\n    const dot00 = v0.dot(v0);\n    const dot01 = v0.dot(v1);\n    const dot02 = v0.dot(v2);\n    const dot11 = v1.dot(v1);\n    const dot12 = v1.dot(v2);\n    const denom = dot00 * dot11 - dot01 * dot01;\n    if (denom === 0) return target.set(-2, -1, -1);\n    const invDenom = 1 / denom;\n    const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n    const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n    return target.set(1 - u - v, v, u);\n  }\n}","map":{"version":3,"names":["Vec2","Vec3","Mat4","tempVec2a","tempVec2b","tempVec2c","tempVec3a","tempVec3b","tempVec3c","tempVec3d","tempVec3e","tempVec3f","tempVec3g","tempVec3h","tempVec3i","tempVec3j","tempVec3k","tempMat4","Raycast","constructor","origin","direction","castMouse","camera","mouse","arguments","length","undefined","type","left","right","bottom","top","zoom","x","y","set","applyMatrix4","worldMatrix","z","getTranslation","unproject","sub","normalize","intersectBounds","meshes","maxDistance","output","Array","isArray","invWorldMat4","hits","forEach","mesh","geometry","bounds","radius","Infinity","computeBoundingSphere","inverse","localMaxDistance","copy","scaleRotateMatrix4","len","transformDirection","distance","center","localDistance","raycast","intersectSphere","min","max","intersectBox","hit","localPoint","point","multiply","add","push","sort","a","b","intersectMeshes","cullFace","includeUV","includeNormal","c","closestFaceNormal","faceNormal","barycoord","uvA","uvB","uvC","i","closestA","closestB","closestC","attributes","index","position","start","Math","drawRange","end","count","stride","size","j","ai","data","bi","ci","fromArray","intersectTriangle","splice","localFaceNormal","uv","localNormal","normal","getBarycoord","intersectPlane","plane","xminp","dot","delta","scale","sphere","ray","tca","d2","radius2","thc","sqrt","t0","t1","box","tmin","tmax","tYmin","tYmax","tZmin","tZmax","invdirx","invdiry","invdirz","backfaceCulling","edge1","edge2","diff","cross","DdN","sign","DdQxE2","DdE1xQ","QdN","target","v0","v1","v2","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","v"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/extras/Raycast.js"],"sourcesContent":["// TODO: barycentric code shouldn't be here, but where?\n// TODO: SphereCast?\n\nimport { Vec2 } from '../math/Vec2.js';\nimport { Vec3 } from '../math/Vec3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nconst tempVec2a = /* @__PURE__ */ new Vec2();\nconst tempVec2b = /* @__PURE__ */ new Vec2();\nconst tempVec2c = /* @__PURE__ */ new Vec2();\n\nconst tempVec3a = /* @__PURE__ */ new Vec3();\nconst tempVec3b = /* @__PURE__ */ new Vec3();\nconst tempVec3c = /* @__PURE__ */ new Vec3();\nconst tempVec3d = /* @__PURE__ */ new Vec3();\nconst tempVec3e = /* @__PURE__ */ new Vec3();\nconst tempVec3f = /* @__PURE__ */ new Vec3();\nconst tempVec3g = /* @__PURE__ */ new Vec3();\nconst tempVec3h = /* @__PURE__ */ new Vec3();\nconst tempVec3i = /* @__PURE__ */ new Vec3();\nconst tempVec3j = /* @__PURE__ */ new Vec3();\nconst tempVec3k = /* @__PURE__ */ new Vec3();\n\nconst tempMat4 = /* @__PURE__ */ new Mat4();\n\nexport class Raycast {\n    constructor() {\n        this.origin = new Vec3();\n        this.direction = new Vec3();\n    }\n\n    // Set ray from mouse unprojection\n    castMouse(camera, mouse = [0, 0]) {\n        if (camera.type === 'orthographic') {\n            // Set origin\n            // Since camera is orthographic, origin is not the camera position\n            const { left, right, bottom, top, zoom } = camera;\n            const x = left / zoom + ((right - left) / zoom) * (mouse[0] * 0.5 + 0.5);\n            const y = bottom / zoom + ((top - bottom) / zoom) * (mouse[1] * 0.5 + 0.5);\n            this.origin.set(x, y, 0);\n            this.origin.applyMatrix4(camera.worldMatrix);\n\n            // Set direction\n            // https://community.khronos.org/t/get-direction-from-transformation-matrix-or-quat/65502/2\n            this.direction.x = -camera.worldMatrix[8];\n            this.direction.y = -camera.worldMatrix[9];\n            this.direction.z = -camera.worldMatrix[10];\n        } else {\n            // Set origin\n            camera.worldMatrix.getTranslation(this.origin);\n\n            // Set direction\n            this.direction.set(mouse[0], mouse[1], 0.5);\n            camera.unproject(this.direction);\n            this.direction.sub(this.origin).normalize();\n        }\n    }\n\n    intersectBounds(meshes, { maxDistance, output = [] } = {}) {\n        if (!Array.isArray(meshes)) meshes = [meshes];\n\n        const invWorldMat4 = tempMat4;\n        const origin = tempVec3a;\n        const direction = tempVec3b;\n\n        const hits = output;\n        hits.length = 0;\n\n        meshes.forEach((mesh) => {\n            // Create bounds\n            if (!mesh.geometry.bounds || mesh.geometry.bounds.radius === Infinity) mesh.geometry.computeBoundingSphere();\n            const bounds = mesh.geometry.bounds;\n            invWorldMat4.inverse(mesh.worldMatrix);\n\n            // Get max distance locally\n            let localMaxDistance;\n            if (maxDistance) {\n                direction.copy(this.direction).scaleRotateMatrix4(invWorldMat4);\n                localMaxDistance = maxDistance * direction.len();\n            }\n\n            // Take world space ray and make it object space to align with bounding box\n            origin.copy(this.origin).applyMatrix4(invWorldMat4);\n            direction.copy(this.direction).transformDirection(invWorldMat4);\n\n            // Break out early if bounds too far away from origin\n            if (maxDistance) {\n                if (origin.distance(bounds.center) - bounds.radius > localMaxDistance) return;\n            }\n\n            let localDistance = 0;\n\n            // Check origin isn't inside bounds before testing intersection\n            if (mesh.geometry.raycast === 'sphere') {\n                if (origin.distance(bounds.center) > bounds.radius) {\n                    localDistance = this.intersectSphere(bounds, origin, direction);\n                    if (!localDistance) return;\n                }\n            } else {\n                if (\n                    origin.x < bounds.min.x ||\n                    origin.x > bounds.max.x ||\n                    origin.y < bounds.min.y ||\n                    origin.y > bounds.max.y ||\n                    origin.z < bounds.min.z ||\n                    origin.z > bounds.max.z\n                ) {\n                    localDistance = this.intersectBox(bounds, origin, direction);\n                    if (!localDistance) return;\n                }\n            }\n\n            if (maxDistance && localDistance > localMaxDistance) return;\n\n            // Create object on mesh to avoid generating lots of objects\n            if (!mesh.hit) mesh.hit = { localPoint: new Vec3(), point: new Vec3() };\n\n            mesh.hit.localPoint.copy(direction).multiply(localDistance).add(origin);\n            mesh.hit.point.copy(mesh.hit.localPoint).applyMatrix4(mesh.worldMatrix);\n            mesh.hit.distance = mesh.hit.point.distance(this.origin);\n\n            hits.push(mesh);\n        });\n\n        hits.sort((a, b) => a.hit.distance - b.hit.distance);\n        return hits;\n    }\n\n    intersectMeshes(meshes, { cullFace = true, maxDistance, includeUV = true, includeNormal = true, output = [] } = {}) {\n        // Test bounds first before testing geometry\n        const hits = this.intersectBounds(meshes, { maxDistance, output });\n        if (!hits.length) return hits;\n\n        const invWorldMat4 = tempMat4;\n        const origin = tempVec3a;\n        const direction = tempVec3b;\n        const a = tempVec3c;\n        const b = tempVec3d;\n        const c = tempVec3e;\n        const closestFaceNormal = tempVec3f;\n        const faceNormal = tempVec3g;\n        const barycoord = tempVec3h;\n        const uvA = tempVec2a;\n        const uvB = tempVec2b;\n        const uvC = tempVec2c;\n\n        for (let i = hits.length - 1; i >= 0; i--) {\n            const mesh = hits[i];\n            invWorldMat4.inverse(mesh.worldMatrix);\n\n            // Get max distance locally\n            let localMaxDistance;\n            if (maxDistance) {\n                direction.copy(this.direction).scaleRotateMatrix4(invWorldMat4);\n                localMaxDistance = maxDistance * direction.len();\n            }\n\n            // Take world space ray and make it object space to align with bounding box\n            origin.copy(this.origin).applyMatrix4(invWorldMat4);\n            direction.copy(this.direction).transformDirection(invWorldMat4);\n\n            let localDistance = 0;\n            let closestA, closestB, closestC;\n\n            const geometry = mesh.geometry;\n            const attributes = geometry.attributes;\n            const index = attributes.index;\n            const position = attributes.position;\n\n            const start = Math.max(0, geometry.drawRange.start);\n            const end = Math.min(index ? index.count : position.count, geometry.drawRange.start + geometry.drawRange.count);\n            // Data loaded shouldn't haave stride, only buffers\n            // const stride = position.stride ? position.stride / position.data.BYTES_PER_ELEMENT : position.size;\n            const stride = position.size;\n\n            for (let j = start; j < end; j += 3) {\n                // Position attribute indices for each triangle\n                const ai = index ? index.data[j] : j;\n                const bi = index ? index.data[j + 1] : j + 1;\n                const ci = index ? index.data[j + 2] : j + 2;\n\n                a.fromArray(position.data, ai * stride);\n                b.fromArray(position.data, bi * stride);\n                c.fromArray(position.data, ci * stride);\n\n                const distance = this.intersectTriangle(a, b, c, cullFace, origin, direction, faceNormal);\n                if (!distance) continue;\n\n                // Too far away\n                if (maxDistance && distance > localMaxDistance) continue;\n\n                if (!localDistance || distance < localDistance) {\n                    localDistance = distance;\n                    closestA = ai;\n                    closestB = bi;\n                    closestC = ci;\n                    closestFaceNormal.copy(faceNormal);\n                }\n            }\n\n            if (!localDistance) hits.splice(i, 1);\n\n            // Update hit values from bounds-test\n            mesh.hit.localPoint.copy(direction).multiply(localDistance).add(origin);\n            mesh.hit.point.copy(mesh.hit.localPoint).applyMatrix4(mesh.worldMatrix);\n            mesh.hit.distance = mesh.hit.point.distance(this.origin);\n\n            // Add unique hit objects on mesh to avoid generating lots of objects\n            if (!mesh.hit.faceNormal) {\n                mesh.hit.localFaceNormal = new Vec3();\n                mesh.hit.faceNormal = new Vec3();\n                mesh.hit.uv = new Vec2();\n                mesh.hit.localNormal = new Vec3();\n                mesh.hit.normal = new Vec3();\n            }\n\n            // Add face normal data which is already computed\n            mesh.hit.localFaceNormal.copy(closestFaceNormal);\n            mesh.hit.faceNormal.copy(mesh.hit.localFaceNormal).transformDirection(mesh.worldMatrix);\n\n            // Optional data, opt out to optimise a bit if necessary\n            if (includeUV || includeNormal) {\n                // Calculate barycoords to find uv values at hit point\n                a.fromArray(position.data, closestA * 3);\n                b.fromArray(position.data, closestB * 3);\n                c.fromArray(position.data, closestC * 3);\n                this.getBarycoord(mesh.hit.localPoint, a, b, c, barycoord);\n            }\n\n            if (includeUV && attributes.uv) {\n                uvA.fromArray(attributes.uv.data, closestA * 2);\n                uvB.fromArray(attributes.uv.data, closestB * 2);\n                uvC.fromArray(attributes.uv.data, closestC * 2);\n                mesh.hit.uv.set(\n                    uvA.x * barycoord.x + uvB.x * barycoord.y + uvC.x * barycoord.z,\n                    uvA.y * barycoord.x + uvB.y * barycoord.y + uvC.y * barycoord.z\n                );\n            }\n\n            if (includeNormal && attributes.normal) {\n                a.fromArray(attributes.normal.data, closestA * 3);\n                b.fromArray(attributes.normal.data, closestB * 3);\n                c.fromArray(attributes.normal.data, closestC * 3);\n                mesh.hit.localNormal.set(\n                    a.x * barycoord.x + b.x * barycoord.y + c.x * barycoord.z,\n                    a.y * barycoord.x + b.y * barycoord.y + c.y * barycoord.z,\n                    a.z * barycoord.x + b.z * barycoord.y + c.z * barycoord.z\n                );\n\n                mesh.hit.normal.copy(mesh.hit.localNormal).transformDirection(mesh.worldMatrix);\n            }\n        }\n\n        hits.sort((a, b) => a.hit.distance - b.hit.distance);\n        return hits;\n    }\n\n    intersectPlane(plane, origin = this.origin, direction = this.direction) {\n        const xminp = tempVec3a;\n        xminp.sub(plane.origin, origin);\n\n        const a = xminp.dot(plane.normal);\n        const b = direction.dot(plane.normal);\n        // Assuming we don't want to count a ray parallel to the plane as intersecting\n        if (b == 0) return 0;\n        const delta = a / b;\n        if (delta <= 0) return 0;\n        return origin.add(direction.scale(delta));\n    }\n\n    intersectSphere(sphere, origin = this.origin, direction = this.direction) {\n        const ray = tempVec3c;\n        ray.sub(sphere.center, origin);\n        const tca = ray.dot(direction);\n        const d2 = ray.dot(ray) - tca * tca;\n        const radius2 = sphere.radius * sphere.radius;\n        if (d2 > radius2) return 0;\n        const thc = Math.sqrt(radius2 - d2);\n        const t0 = tca - thc;\n        const t1 = tca + thc;\n        if (t0 < 0 && t1 < 0) return 0;\n        if (t0 < 0) return t1;\n        return t0;\n    }\n\n    // Ray AABB - Ray Axis aligned bounding box testing\n    intersectBox(box, origin = this.origin, direction = this.direction) {\n        let tmin, tmax, tYmin, tYmax, tZmin, tZmax;\n        const invdirx = 1 / direction.x;\n        const invdiry = 1 / direction.y;\n        const invdirz = 1 / direction.z;\n        const min = box.min;\n        const max = box.max;\n        tmin = ((invdirx >= 0 ? min.x : max.x) - origin.x) * invdirx;\n        tmax = ((invdirx >= 0 ? max.x : min.x) - origin.x) * invdirx;\n        tYmin = ((invdiry >= 0 ? min.y : max.y) - origin.y) * invdiry;\n        tYmax = ((invdiry >= 0 ? max.y : min.y) - origin.y) * invdiry;\n        if (tmin > tYmax || tYmin > tmax) return 0;\n        if (tYmin > tmin) tmin = tYmin;\n        if (tYmax < tmax) tmax = tYmax;\n        tZmin = ((invdirz >= 0 ? min.z : max.z) - origin.z) * invdirz;\n        tZmax = ((invdirz >= 0 ? max.z : min.z) - origin.z) * invdirz;\n        if (tmin > tZmax || tZmin > tmax) return 0;\n        if (tZmin > tmin) tmin = tZmin;\n        if (tZmax < tmax) tmax = tZmax;\n        if (tmax < 0) return 0;\n        return tmin >= 0 ? tmin : tmax;\n    }\n\n    intersectTriangle(a, b, c, backfaceCulling = true, origin = this.origin, direction = this.direction, normal = tempVec3g) {\n        // from https://github.com/mrdoob/three.js/blob/master/src/math/Ray.js\n        // which is from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n        const edge1 = tempVec3h;\n        const edge2 = tempVec3i;\n        const diff = tempVec3j;\n        edge1.sub(b, a);\n        edge2.sub(c, a);\n        normal.cross(edge1, edge2);\n        let DdN = direction.dot(normal);\n        if (!DdN) return 0;\n        let sign;\n        if (DdN > 0) {\n            if (backfaceCulling) return 0;\n            sign = 1;\n        } else {\n            sign = -1;\n            DdN = -DdN;\n        }\n        diff.sub(origin, a);\n        let DdQxE2 = sign * direction.dot(edge2.cross(diff, edge2));\n        if (DdQxE2 < 0) return 0;\n        let DdE1xQ = sign * direction.dot(edge1.cross(diff));\n        if (DdE1xQ < 0) return 0;\n        if (DdQxE2 + DdE1xQ > DdN) return 0;\n        let QdN = -sign * diff.dot(normal);\n        if (QdN < 0) return 0;\n        return QdN / DdN;\n    }\n\n    getBarycoord(point, a, b, c, target = tempVec3h) {\n        // From https://github.com/mrdoob/three.js/blob/master/src/math/Triangle.js\n        // static/instance method to calculate barycentric coordinates\n        // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n        const v0 = tempVec3i;\n        const v1 = tempVec3j;\n        const v2 = tempVec3k;\n        v0.sub(c, a);\n        v1.sub(b, a);\n        v2.sub(point, a);\n        const dot00 = v0.dot(v0);\n        const dot01 = v0.dot(v1);\n        const dot02 = v0.dot(v2);\n        const dot11 = v1.dot(v1);\n        const dot12 = v1.dot(v2);\n        const denom = dot00 * dot11 - dot01 * dot01;\n        if (denom === 0) return target.set(-2, -1, -1);\n        const invDenom = 1 / denom;\n        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n        const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n        return target.set(1 - u - v, v, u);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}