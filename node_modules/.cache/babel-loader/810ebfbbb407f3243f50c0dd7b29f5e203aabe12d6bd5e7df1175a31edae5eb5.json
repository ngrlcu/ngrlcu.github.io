{"ast":null,"code":"import _objectSpread from\"/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";const _excluded=[\"color\",\"amplitude\",\"distance\",\"enableMouseInteraction\"];import React,{useEffect,useRef}from\"react\";import{Renderer,Program,Mesh,Triangle,Color}from\"ogl\";import\"../assets/styles/Threads.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";const vertexShader=\"\\nattribute vec2 position;\\nattribute vec2 uv;\\nvarying vec2 vUv;\\nvoid main() {\\n  vUv = uv;\\n  gl_Position = vec4(position, 0.0, 1.0);\\n}\\n\";const fragmentShader=\"\\nprecision highp float;\\n\\nuniform float iTime;\\nuniform vec3 iResolution;\\nuniform vec3 uColor;\\nuniform float uAmplitude;\\nuniform float uDistance;\\nuniform vec2 uMouse;\\n\\n#define PI 3.1415926538\\n\\nconst int u_line_count = 40;\\nconst float u_line_width = 7.0;\\nconst float u_line_blur = 10.0;\\n\\nfloat Perlin2D(vec2 P) {\\n    vec2 Pi = floor(P);\\n    vec4 Pf_Pfmin1 = P.xyxy - vec4(Pi, Pi + 1.0);\\n    vec4 Pt = vec4(Pi.xy, Pi.xy + 1.0);\\n    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;\\n    Pt += vec2(26.0, 161.0).xyxy;\\n    Pt *= Pt;\\n    Pt = Pt.xzxz * Pt.yyww;\\n    vec4 hash_x = fract(Pt * (1.0 / 951.135664));\\n    vec4 hash_y = fract(Pt * (1.0 / 642.949883));\\n    vec4 grad_x = hash_x - 0.49999;\\n    vec4 grad_y = hash_y - 0.49999;\\n    vec4 grad_results = inversesqrt(grad_x * grad_x + grad_y * grad_y)\\n        * (grad_x * Pf_Pfmin1.xzxz + grad_y * Pf_Pfmin1.yyww);\\n    grad_results *= 1.4142135623730950;\\n    vec2 blend = Pf_Pfmin1.xy * Pf_Pfmin1.xy * Pf_Pfmin1.xy\\n               * (Pf_Pfmin1.xy * (Pf_Pfmin1.xy * 6.0 - 15.0) + 10.0);\\n    vec4 blend2 = vec4(blend, vec2(1.0 - blend));\\n    return dot(grad_results, blend2.zxzx * blend2.wwyy);\\n}\\n\\nfloat pixel(float count, vec2 resolution) {\\n    return (1.0 / max(resolution.x, resolution.y)) * count;\\n}\\n\\nfloat lineFn(vec2 st, float width, float perc, float offset, vec2 mouse, float time, float amplitude, float distance) {\\n    float split_offset = (perc * 0.4);\\n    float split_point = 0.1 + split_offset;\\n\\n    float amplitude_normal = smoothstep(split_point, 0.7, st.x);\\n    float amplitude_strength = 0.5;\\n    float finalAmplitude = amplitude_normal * amplitude_strength\\n                           * amplitude * (1.0 + (mouse.y - 0.5) * 0.2);\\n\\n    float time_scaled = time / 10.0 + (mouse.x - 0.5) * 1.0;\\n    float blur = smoothstep(split_point, split_point + 0.05, st.x) * perc;\\n\\n    float xnoise = mix(\\n        Perlin2D(vec2(time_scaled, st.x + perc) * 2.5),\\n        Perlin2D(vec2(time_scaled, st.x + time_scaled) * 3.5) / 1.5,\\n        st.x * 0.3\\n    );\\n\\n    float y = 0.5 + (perc - 0.5) * distance + xnoise / 2.0 * finalAmplitude;\\n\\n    float line_start = smoothstep(\\n        y + (width / 2.0) + (u_line_blur * pixel(1.0, iResolution.xy) * blur),\\n        y,\\n        st.y\\n    );\\n\\n    float line_end = smoothstep(\\n        y,\\n        y - (width / 2.0) - (u_line_blur * pixel(1.0, iResolution.xy) * blur),\\n        st.y\\n    );\\n\\n    return clamp(\\n        (line_start - line_end) * (1.0 - smoothstep(0.0, 1.0, pow(perc, 0.3))),\\n        0.0,\\n        1.0\\n    );\\n}\\n\\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\\n    vec2 uv = fragCoord / iResolution.xy;\\n\\n    float line_strength = 1.0;\\n    for (int i = 0; i < u_line_count; i++) {\\n        float p = float(i) / float(u_line_count);\\n        line_strength *= (1.0 - lineFn(\\n            uv,\\n            u_line_width * pixel(1.0, iResolution.xy) * (1.0 - p),\\n            p,\\n            (PI * 1.0) * p,\\n            uMouse,\\n            iTime,\\n            uAmplitude,\\n            uDistance\\n        ));\\n    }\\n\\n    float colorVal = 1.0 - line_strength;\\n    fragColor = vec4(uColor * colorVal, colorVal);\\n}\\n\\nvoid main() {\\n    mainImage(gl_FragColor, gl_FragCoord.xy);\\n}\\n\";const Threads=_ref=>{let{color=[1,1,1],amplitude=1,distance=0,enableMouseInteraction=false}=_ref,rest=_objectWithoutProperties(_ref,_excluded);const containerRef=useRef(null);const animationFrameId=useRef();useEffect(()=>{if(!containerRef.current)return;const container=containerRef.current;const renderer=new Renderer({alpha:true});const gl=renderer.gl;gl.clearColor(0,0,0,0);gl.enable(gl.BLEND);gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA);container.appendChild(gl.canvas);const geometry=new Triangle(gl);const program=new Program(gl,{vertex:vertexShader,fragment:fragmentShader,uniforms:{iTime:{value:0},iResolution:{value:new Color(gl.canvas.width,gl.canvas.height,gl.canvas.width/gl.canvas.height)},uColor:{value:new Color(...color)},uAmplitude:{value:amplitude},uDistance:{value:distance},uMouse:{value:new Float32Array([0.5,0.5])}}});const mesh=new Mesh(gl,{geometry,program});function resize(){const{clientWidth,clientHeight}=container;renderer.setSize(clientWidth,clientHeight);program.uniforms.iResolution.value.r=clientWidth;program.uniforms.iResolution.value.g=clientHeight;program.uniforms.iResolution.value.b=clientWidth/clientHeight;}window.addEventListener(\"resize\",resize);resize();let currentMouse=[0.5,0.5];let targetMouse=[0.5,0.5];function handleMouseMove(e){const rect=container.getBoundingClientRect();const x=(e.clientX-rect.left)/rect.width;const y=1.0-(e.clientY-rect.top)/rect.height;targetMouse=[x,y];}function handleMouseLeave(){targetMouse=[0.5,0.5];}if(enableMouseInteraction){container.addEventListener(\"mousemove\",handleMouseMove);container.addEventListener(\"mouseleave\",handleMouseLeave);}function update(t){if(enableMouseInteraction){const smoothing=0.05;currentMouse[0]+=smoothing*(targetMouse[0]-currentMouse[0]);currentMouse[1]+=smoothing*(targetMouse[1]-currentMouse[1]);program.uniforms.uMouse.value[0]=currentMouse[0];program.uniforms.uMouse.value[1]=currentMouse[1];}else{program.uniforms.uMouse.value[0]=0.5;program.uniforms.uMouse.value[1]=0.5;}program.uniforms.iTime.value=t*0.001;renderer.render({scene:mesh});animationFrameId.current=requestAnimationFrame(update);}animationFrameId.current=requestAnimationFrame(update);return()=>{var _gl$getExtension;if(animationFrameId.current)cancelAnimationFrame(animationFrameId.current);window.removeEventListener(\"resize\",resize);if(enableMouseInteraction){container.removeEventListener(\"mousemove\",handleMouseMove);container.removeEventListener(\"mouseleave\",handleMouseLeave);}if(container.contains(gl.canvas))container.removeChild(gl.canvas);(_gl$getExtension=gl.getExtension(\"WEBGL_lose_context\"))===null||_gl$getExtension===void 0?void 0:_gl$getExtension.loseContext();};},[color,amplitude,distance,enableMouseInteraction]);return/*#__PURE__*/_jsx(\"div\",_objectSpread({ref:containerRef,className:\"threads-container\"},rest));};export default Threads;","map":{"version":3,"names":["React","useEffect","useRef","Renderer","Program","Mesh","Triangle","Color","jsx","_jsx","vertexShader","fragmentShader","Threads","_ref","color","amplitude","distance","enableMouseInteraction","rest","_objectWithoutProperties","_excluded","containerRef","animationFrameId","current","container","renderer","alpha","gl","clearColor","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","appendChild","canvas","geometry","program","vertex","fragment","uniforms","iTime","value","iResolution","width","height","uColor","uAmplitude","uDistance","uMouse","Float32Array","mesh","resize","clientWidth","clientHeight","setSize","r","g","b","window","addEventListener","currentMouse","targetMouse","handleMouseMove","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","handleMouseLeave","update","t","smoothing","render","scene","requestAnimationFrame","_gl$getExtension","cancelAnimationFrame","removeEventListener","contains","removeChild","getExtension","loseContext","_objectSpread","ref","className"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/src/components/Threads.tsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { Renderer, Program, Mesh, Triangle, Color } from \"ogl\";\n\nimport \"../assets/styles/Threads.scss\";\n\ninterface ThreadsProps {\n  color?: [number, number, number];\n  amplitude?: number;\n  distance?: number;\n  enableMouseInteraction?: boolean;\n}\n\nconst vertexShader = `\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n`;\n\nconst fragmentShader = `\nprecision highp float;\n\nuniform float iTime;\nuniform vec3 iResolution;\nuniform vec3 uColor;\nuniform float uAmplitude;\nuniform float uDistance;\nuniform vec2 uMouse;\n\n#define PI 3.1415926538\n\nconst int u_line_count = 40;\nconst float u_line_width = 7.0;\nconst float u_line_blur = 10.0;\n\nfloat Perlin2D(vec2 P) {\n    vec2 Pi = floor(P);\n    vec4 Pf_Pfmin1 = P.xyxy - vec4(Pi, Pi + 1.0);\n    vec4 Pt = vec4(Pi.xy, Pi.xy + 1.0);\n    Pt = Pt - floor(Pt * (1.0 / 71.0)) * 71.0;\n    Pt += vec2(26.0, 161.0).xyxy;\n    Pt *= Pt;\n    Pt = Pt.xzxz * Pt.yyww;\n    vec4 hash_x = fract(Pt * (1.0 / 951.135664));\n    vec4 hash_y = fract(Pt * (1.0 / 642.949883));\n    vec4 grad_x = hash_x - 0.49999;\n    vec4 grad_y = hash_y - 0.49999;\n    vec4 grad_results = inversesqrt(grad_x * grad_x + grad_y * grad_y)\n        * (grad_x * Pf_Pfmin1.xzxz + grad_y * Pf_Pfmin1.yyww);\n    grad_results *= 1.4142135623730950;\n    vec2 blend = Pf_Pfmin1.xy * Pf_Pfmin1.xy * Pf_Pfmin1.xy\n               * (Pf_Pfmin1.xy * (Pf_Pfmin1.xy * 6.0 - 15.0) + 10.0);\n    vec4 blend2 = vec4(blend, vec2(1.0 - blend));\n    return dot(grad_results, blend2.zxzx * blend2.wwyy);\n}\n\nfloat pixel(float count, vec2 resolution) {\n    return (1.0 / max(resolution.x, resolution.y)) * count;\n}\n\nfloat lineFn(vec2 st, float width, float perc, float offset, vec2 mouse, float time, float amplitude, float distance) {\n    float split_offset = (perc * 0.4);\n    float split_point = 0.1 + split_offset;\n\n    float amplitude_normal = smoothstep(split_point, 0.7, st.x);\n    float amplitude_strength = 0.5;\n    float finalAmplitude = amplitude_normal * amplitude_strength\n                           * amplitude * (1.0 + (mouse.y - 0.5) * 0.2);\n\n    float time_scaled = time / 10.0 + (mouse.x - 0.5) * 1.0;\n    float blur = smoothstep(split_point, split_point + 0.05, st.x) * perc;\n\n    float xnoise = mix(\n        Perlin2D(vec2(time_scaled, st.x + perc) * 2.5),\n        Perlin2D(vec2(time_scaled, st.x + time_scaled) * 3.5) / 1.5,\n        st.x * 0.3\n    );\n\n    float y = 0.5 + (perc - 0.5) * distance + xnoise / 2.0 * finalAmplitude;\n\n    float line_start = smoothstep(\n        y + (width / 2.0) + (u_line_blur * pixel(1.0, iResolution.xy) * blur),\n        y,\n        st.y\n    );\n\n    float line_end = smoothstep(\n        y,\n        y - (width / 2.0) - (u_line_blur * pixel(1.0, iResolution.xy) * blur),\n        st.y\n    );\n\n    return clamp(\n        (line_start - line_end) * (1.0 - smoothstep(0.0, 1.0, pow(perc, 0.3))),\n        0.0,\n        1.0\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float line_strength = 1.0;\n    for (int i = 0; i < u_line_count; i++) {\n        float p = float(i) / float(u_line_count);\n        line_strength *= (1.0 - lineFn(\n            uv,\n            u_line_width * pixel(1.0, iResolution.xy) * (1.0 - p),\n            p,\n            (PI * 1.0) * p,\n            uMouse,\n            iTime,\n            uAmplitude,\n            uDistance\n        ));\n    }\n\n    float colorVal = 1.0 - line_strength;\n    fragColor = vec4(uColor * colorVal, colorVal);\n}\n\nvoid main() {\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n`;\n\nconst Threads: React.FC<ThreadsProps> = ({\n  color = [1, 1, 1],\n  amplitude = 1,\n  distance = 0,\n  enableMouseInteraction = false,\n  ...rest\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const animationFrameId = useRef<number>();\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n\n    const renderer = new Renderer({ alpha: true });\n    const gl = renderer.gl;\n    gl.clearColor(0, 0, 0, 0);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n    container.appendChild(gl.canvas);\n\n    const geometry = new Triangle(gl);\n    const program = new Program(gl, {\n      vertex: vertexShader,\n      fragment: fragmentShader,\n      uniforms: {\n        iTime: { value: 0 },\n        iResolution: {\n          value: new Color(\n            gl.canvas.width,\n            gl.canvas.height,\n            gl.canvas.width / gl.canvas.height\n          ),\n        },\n        uColor: { value: new Color(...color) },\n        uAmplitude: { value: amplitude },\n        uDistance: { value: distance },\n        uMouse: { value: new Float32Array([0.5, 0.5]) },\n      },\n    });\n\n    const mesh = new Mesh(gl, { geometry, program });\n\n    function resize() {\n      const { clientWidth, clientHeight } = container;\n      renderer.setSize(clientWidth, clientHeight);\n      program.uniforms.iResolution.value.r = clientWidth;\n      program.uniforms.iResolution.value.g = clientHeight;\n      program.uniforms.iResolution.value.b = clientWidth / clientHeight;\n    }\n    window.addEventListener(\"resize\", resize);\n    resize();\n\n    let currentMouse = [0.5, 0.5];\n    let targetMouse = [0.5, 0.5];\n\n    function handleMouseMove(e: MouseEvent) {\n      const rect = container.getBoundingClientRect();\n      const x = (e.clientX - rect.left) / rect.width;\n      const y = 1.0 - (e.clientY - rect.top) / rect.height;\n      targetMouse = [x, y];\n    }\n    function handleMouseLeave() {\n      targetMouse = [0.5, 0.5];\n    }\n    if (enableMouseInteraction) {\n      container.addEventListener(\"mousemove\", handleMouseMove);\n      container.addEventListener(\"mouseleave\", handleMouseLeave);\n    }\n\n    function update(t: number) {\n      if (enableMouseInteraction) {\n        const smoothing = 0.05;\n        currentMouse[0] += smoothing * (targetMouse[0] - currentMouse[0]);\n        currentMouse[1] += smoothing * (targetMouse[1] - currentMouse[1]);\n        program.uniforms.uMouse.value[0] = currentMouse[0];\n        program.uniforms.uMouse.value[1] = currentMouse[1];\n      } else {\n        program.uniforms.uMouse.value[0] = 0.5;\n        program.uniforms.uMouse.value[1] = 0.5;\n      }\n      program.uniforms.iTime.value = t * 0.001;\n\n      renderer.render({ scene: mesh });\n      animationFrameId.current = requestAnimationFrame(update);\n    }\n    animationFrameId.current = requestAnimationFrame(update);\n\n    return () => {\n      if (animationFrameId.current)\n        cancelAnimationFrame(animationFrameId.current);\n      window.removeEventListener(\"resize\", resize);\n\n      if (enableMouseInteraction) {\n        container.removeEventListener(\"mousemove\", handleMouseMove);\n        container.removeEventListener(\"mouseleave\", handleMouseLeave);\n      }\n      if (container.contains(gl.canvas)) container.removeChild(gl.canvas);\n      gl.getExtension(\"WEBGL_lose_context\")?.loseContext();\n    };\n  }, [color, amplitude, distance, enableMouseInteraction]);\n\n  return <div ref={containerRef} className=\"threads-container\" {...rest} />;\n};\n\nexport default Threads;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}