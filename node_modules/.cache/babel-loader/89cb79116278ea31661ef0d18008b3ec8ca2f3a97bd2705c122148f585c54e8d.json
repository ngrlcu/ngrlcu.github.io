{"ast":null,"code":"import * as Mat3Func from './functions/Mat3Func.js';\nexport class Mat3 extends Array {\n  constructor() {\n    let m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let m10 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let m11 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    let m12 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n    let m20 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n    let m21 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n    let m22 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;\n    super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n    return this;\n  }\n  set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    if (m00.length) return this.copy(m00);\n    Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n    return this;\n  }\n  translate(v) {\n    let m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n    Mat3Func.translate(this, m, v);\n    return this;\n  }\n  rotate(v) {\n    let m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n    Mat3Func.rotate(this, m, v);\n    return this;\n  }\n  scale(v) {\n    let m = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n    Mat3Func.scale(this, m, v);\n    return this;\n  }\n  multiply(ma, mb) {\n    if (mb) {\n      Mat3Func.multiply(this, ma, mb);\n    } else {\n      Mat3Func.multiply(this, this, ma);\n    }\n    return this;\n  }\n  identity() {\n    Mat3Func.identity(this);\n    return this;\n  }\n  copy(m) {\n    Mat3Func.copy(this, m);\n    return this;\n  }\n  fromMatrix4(m) {\n    Mat3Func.fromMat4(this, m);\n    return this;\n  }\n  fromQuaternion(q) {\n    Mat3Func.fromQuat(this, q);\n    return this;\n  }\n  fromBasis(vec3a, vec3b, vec3c) {\n    this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n    return this;\n  }\n  inverse() {\n    let m = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;\n    Mat3Func.invert(this, m);\n    return this;\n  }\n  getNormalMatrix(m) {\n    Mat3Func.normalFromMat4(this, m);\n    return this;\n  }\n}","map":{"version":3,"names":["Mat3Func","Mat3","Array","constructor","m00","arguments","length","undefined","m01","m02","m10","m11","m12","m20","m21","m22","set","copy","translate","v","m","rotate","scale","multiply","ma","mb","identity","fromMatrix4","fromMat4","fromQuaternion","q","fromQuat","fromBasis","vec3a","vec3b","vec3c","inverse","invert","getNormalMatrix","normalFromMat4"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/math/Mat3.js"],"sourcesContent":["import * as Mat3Func from './functions/Mat3Func.js';\n\nexport class Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat3Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, m = this) {\n        Mat3Func.rotate(this, m, v);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat3Func.scale(this, m, v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat3Func.multiply(this, ma, mb);\n        } else {\n            Mat3Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat3Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat3Func.copy(this, m);\n        return this;\n    }\n\n    fromMatrix4(m) {\n        Mat3Func.fromMat4(this, m);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat3Func.fromQuat(this, q);\n        return this;\n    }\n\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat3Func.invert(this, m);\n        return this;\n    }\n\n    getNormalMatrix(m) {\n        Mat3Func.normalFromMat4(this, m);\n        return this;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}