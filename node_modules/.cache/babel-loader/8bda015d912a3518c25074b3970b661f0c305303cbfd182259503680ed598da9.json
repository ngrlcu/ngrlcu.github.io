{"ast":null,"code":"import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n  let bx = b[0],\n    by = b[1],\n    bz = b[2],\n    bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  let ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n  let bx = Math.sin(rad),\n    bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  let ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n  let by = Math.sin(rad),\n    bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  let ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n  let bz = Math.sin(rad),\n    bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n  let bx = b[0],\n    by = b[1],\n    bz = b[2],\n    bw = b[3];\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  }\n  // calculate coefficients\n  if (1.0 - cosom > 0.000001) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3];\n  let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  let invDot = dot ? 1.0 / dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    let j = (i + 1) % 3;\n    let k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler) {\n  let order = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'YXZ';\n  let sx = Math.sin(euler[0] * 0.5);\n  let cx = Math.cos(euler[0] * 0.5);\n  let sy = Math.sin(euler[1] * 0.5);\n  let cy = Math.cos(euler[1] * 0.5);\n  let sz = Math.sin(euler[2] * 0.5);\n  let cz = Math.cos(euler[2] * 0.5);\n  if (order === 'XYZ') {\n    out[0] = sx * cy * cz + cx * sy * sz;\n    out[1] = cx * sy * cz - sx * cy * sz;\n    out[2] = cx * cy * sz + sx * sy * cz;\n    out[3] = cx * cy * cz - sx * sy * sz;\n  } else if (order === 'YXZ') {\n    out[0] = sx * cy * cz + cx * sy * sz;\n    out[1] = cx * sy * cz - sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n  } else if (order === 'ZXY') {\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz + sx * sy * cz;\n    out[3] = cx * cy * cz - sx * sy * sz;\n  } else if (order === 'ZYX') {\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n  } else if (order === 'YZX') {\n    out[0] = sx * cy * cz + cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz - sx * sy * sz;\n  } else if (order === 'XZY') {\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz - sx * cy * sz;\n    out[2] = cx * cy * sz + sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n  }\n  return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;","map":{"version":3,"names":["vec4","identity","out","setAxisAngle","axis","rad","s","Math","sin","cos","multiply","a","b","ax","ay","az","aw","bx","by","bz","bw","rotateX","rotateY","rotateZ","slerp","t","omega","cosom","sinom","scale0","scale1","acos","invert","a0","a1","a2","a3","dot","invDot","conjugate","fromMat3","m","fTrace","fRoot","sqrt","i","j","k","fromEuler","euler","order","arguments","length","undefined","sx","cx","sy","cy","sz","cz","copy","set","add","scale","lerp","normalize"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/math/functions/QuatFunc.js"],"sourcesContent":["import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}