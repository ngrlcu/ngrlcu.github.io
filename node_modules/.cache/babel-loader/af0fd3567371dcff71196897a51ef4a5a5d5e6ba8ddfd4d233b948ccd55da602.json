{"ast":null,"code":"let supportedFormat;\nlet id = 0;\nexport class BasisManager {\n  constructor(workerSrc, gl) {\n    if (!supportedFormat) supportedFormat = this.getSupportedFormat(gl);\n    this.onMessage = this.onMessage.bind(this);\n    this.queue = new Map();\n    this.initWorker(workerSrc);\n  }\n  getSupportedFormat() {\n    let gl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.createElement('canvas').getContext('webgl');\n    /* if (!!gl.getExtension('WEBGL_compressed_texture_etc')) {\n        return 'etc2';\n    } else  */\n    if (!!gl.getExtension('WEBGL_compressed_texture_astc')) {\n      return 'astc';\n    } else if (!!gl.getExtension('EXT_texture_compression_bptc')) {\n      return 'bptc';\n    } else if (!!gl.getExtension('WEBGL_compressed_texture_s3tc')) {\n      return 's3tc';\n    } else if (!!gl.getExtension('WEBGL_compressed_texture_etc1')) {\n      return 'etc1';\n    } else if (!!gl.getExtension('WEBGL_compressed_texture_pvrtc') || !!gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc')) {\n      return 'pvrtc';\n      // } else if (!!gl.getExtension('WEBGL_compressed_texture_atc')) {\n      //     return 'atc';\n    }\n    return 'none';\n  }\n  initWorker(workerSrc) {\n    this.worker = new Worker(workerSrc);\n    this.worker.onmessage = this.onMessage;\n  }\n  onMessage(_ref) {\n    let {\n      data\n    } = _ref;\n    const {\n      id,\n      error,\n      image\n    } = data;\n    if (error) {\n      console.log(error, id);\n      return;\n    }\n    const textureResolve = this.queue.get(id);\n    this.queue.delete(id);\n    image.isBasis = true;\n    textureResolve(image);\n  }\n  parseTexture(buffer) {\n    id++;\n    this.worker.postMessage({\n      id,\n      buffer,\n      supportedFormat\n    });\n    let textureResolve;\n    const promise = new Promise(res => textureResolve = res);\n    this.queue.set(id, textureResolve);\n    return promise;\n  }\n}","map":{"version":3,"names":["supportedFormat","id","BasisManager","constructor","workerSrc","gl","getSupportedFormat","onMessage","bind","queue","Map","initWorker","arguments","length","undefined","document","createElement","getContext","getExtension","worker","Worker","onmessage","_ref","data","error","image","console","log","textureResolve","get","delete","isBasis","parseTexture","buffer","postMessage","promise","Promise","res","set"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/extras/BasisManager.js"],"sourcesContent":["let supportedFormat;\nlet id = 0;\n\nexport class BasisManager {\n    constructor(workerSrc, gl) {\n        if (!supportedFormat) supportedFormat = this.getSupportedFormat(gl);\n        this.onMessage = this.onMessage.bind(this);\n        this.queue = new Map();\n        this.initWorker(workerSrc);\n    }\n\n    getSupportedFormat(gl = document.createElement('canvas').getContext('webgl')) {\n        /* if (!!gl.getExtension('WEBGL_compressed_texture_etc')) {\n            return 'etc2';\n        } else  */\n        if (!!gl.getExtension('WEBGL_compressed_texture_astc')) {\n            return 'astc';\n        } else if (!!gl.getExtension('EXT_texture_compression_bptc')) {\n            return 'bptc';\n        } else if (!!gl.getExtension('WEBGL_compressed_texture_s3tc')) {\n            return 's3tc';\n        } else if (!!gl.getExtension('WEBGL_compressed_texture_etc1')) {\n            return 'etc1';\n        } else if (!!gl.getExtension('WEBGL_compressed_texture_pvrtc') || !!gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc')) {\n            return 'pvrtc';\n            // } else if (!!gl.getExtension('WEBGL_compressed_texture_atc')) {\n            //     return 'atc';\n        }\n        return 'none';\n    }\n\n    initWorker(workerSrc) {\n        this.worker = new Worker(workerSrc);\n        this.worker.onmessage = this.onMessage;\n    }\n\n    onMessage({ data }) {\n        const { id, error, image } = data;\n        if (error) {\n            console.log(error, id);\n            return;\n        }\n        const textureResolve = this.queue.get(id);\n        this.queue.delete(id);\n        image.isBasis = true;\n        textureResolve(image);\n    }\n\n    parseTexture(buffer) {\n        id++;\n        this.worker.postMessage({\n            id,\n            buffer,\n            supportedFormat,\n        });\n        let textureResolve;\n        const promise = new Promise((res) => (textureResolve = res));\n        this.queue.set(id, textureResolve);\n        return promise;\n    }\n}\n"],"mappings":"AAAA,IAAIA,eAAe;AACnB,IAAIC,EAAE,GAAG,CAAC;AAEV,OAAO,MAAMC,YAAY,CAAC;EACtBC,WAAWA,CAACC,SAAS,EAAEC,EAAE,EAAE;IACvB,IAAI,CAACL,eAAe,EAAEA,eAAe,GAAG,IAAI,CAACM,kBAAkB,CAACD,EAAE,CAAC;IACnE,IAAI,CAACE,SAAS,GAAG,IAAI,CAACA,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC;IAC1C,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;IACtB,IAAI,CAACC,UAAU,CAACP,SAAS,CAAC;EAC9B;EAEAE,kBAAkBA,CAAA,EAA4D;IAAA,IAA3DD,EAAE,GAAAO,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGG,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAACC,UAAU,CAAC,OAAO,CAAC;IACxE;AACR;AACA;IACQ,IAAI,CAAC,CAACZ,EAAE,CAACa,YAAY,CAAC,+BAA+B,CAAC,EAAE;MACpD,OAAO,MAAM;IACjB,CAAC,MAAM,IAAI,CAAC,CAACb,EAAE,CAACa,YAAY,CAAC,8BAA8B,CAAC,EAAE;MAC1D,OAAO,MAAM;IACjB,CAAC,MAAM,IAAI,CAAC,CAACb,EAAE,CAACa,YAAY,CAAC,+BAA+B,CAAC,EAAE;MAC3D,OAAO,MAAM;IACjB,CAAC,MAAM,IAAI,CAAC,CAACb,EAAE,CAACa,YAAY,CAAC,+BAA+B,CAAC,EAAE;MAC3D,OAAO,MAAM;IACjB,CAAC,MAAM,IAAI,CAAC,CAACb,EAAE,CAACa,YAAY,CAAC,gCAAgC,CAAC,IAAI,CAAC,CAACb,EAAE,CAACa,YAAY,CAAC,uCAAuC,CAAC,EAAE;MAC1H,OAAO,OAAO;MACd;MACA;IACJ;IACA,OAAO,MAAM;EACjB;EAEAP,UAAUA,CAACP,SAAS,EAAE;IAClB,IAAI,CAACe,MAAM,GAAG,IAAIC,MAAM,CAAChB,SAAS,CAAC;IACnC,IAAI,CAACe,MAAM,CAACE,SAAS,GAAG,IAAI,CAACd,SAAS;EAC1C;EAEAA,SAASA,CAAAe,IAAA,EAAW;IAAA,IAAV;MAAEC;IAAK,CAAC,GAAAD,IAAA;IACd,MAAM;MAAErB,EAAE;MAAEuB,KAAK;MAAEC;IAAM,CAAC,GAAGF,IAAI;IACjC,IAAIC,KAAK,EAAE;MACPE,OAAO,CAACC,GAAG,CAACH,KAAK,EAAEvB,EAAE,CAAC;MACtB;IACJ;IACA,MAAM2B,cAAc,GAAG,IAAI,CAACnB,KAAK,CAACoB,GAAG,CAAC5B,EAAE,CAAC;IACzC,IAAI,CAACQ,KAAK,CAACqB,MAAM,CAAC7B,EAAE,CAAC;IACrBwB,KAAK,CAACM,OAAO,GAAG,IAAI;IACpBH,cAAc,CAACH,KAAK,CAAC;EACzB;EAEAO,YAAYA,CAACC,MAAM,EAAE;IACjBhC,EAAE,EAAE;IACJ,IAAI,CAACkB,MAAM,CAACe,WAAW,CAAC;MACpBjC,EAAE;MACFgC,MAAM;MACNjC;IACJ,CAAC,CAAC;IACF,IAAI4B,cAAc;IAClB,MAAMO,OAAO,GAAG,IAAIC,OAAO,CAAEC,GAAG,IAAMT,cAAc,GAAGS,GAAI,CAAC;IAC5D,IAAI,CAAC5B,KAAK,CAAC6B,GAAG,CAACrC,EAAE,EAAE2B,cAAc,CAAC;IAClC,OAAOO,OAAO;EAClB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}