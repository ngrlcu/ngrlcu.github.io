{"ast":null,"code":"import _objectSpread from \"/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"size\", \"symmetric\", \"xColor\", \"yColor\", \"zColor\"];\nimport { Mesh } from '../../core/Mesh.js';\nimport { Program } from '../../core/Program.js';\nimport { Geometry } from '../../core/Geometry.js';\nimport { Vec3 } from '../../math/Vec3.js';\nexport class AxesHelper extends Mesh {\n  constructor(gl) {\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      {\n        size = 1,\n        symmetric = false,\n        xColor = new Vec3(0.96, 0.21, 0.32),\n        yColor = new Vec3(0.44, 0.64, 0.11),\n        zColor = new Vec3(0.18, 0.52, 0.89)\n      } = _ref,\n      meshProps = _objectWithoutProperties(_ref, _excluded);\n    const a = symmetric ? -size : 0;\n    const b = size;\n\n    // prettier-ignore\n    const vertices = new Float32Array([a, 0, 0, b, 0, 0, 0, a, 0, 0, b, 0, 0, 0, a, 0, 0, b]);\n\n    // prettier-ignore\n    const colors = new Float32Array([...xColor, ...xColor, ...yColor, ...yColor, ...zColor, ...zColor]);\n    const geometry = new Geometry(gl, {\n      position: {\n        size: 3,\n        data: vertices\n      },\n      color: {\n        size: 3,\n        data: colors\n      }\n    });\n    const program = new Program(gl, {\n      vertex,\n      fragment\n    });\n    super(gl, _objectSpread(_objectSpread({}, meshProps), {}, {\n      mode: gl.LINES,\n      geometry,\n      program\n    }));\n  }\n}\nconst vertex = /* glsl */\"\\nattribute vec3 position;\\nattribute vec3 color;\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\n\\nvarying vec3 vColor;\\n\\nvoid main() {    \\n    vColor = color;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n\";\nconst fragment = /* glsl */\"\\nprecision highp float;\\nvarying vec3 vColor;\\n\\nvoid main() {    \\n    gl_FragColor = vec4(vColor, 1.0);\\n}\\n\";","map":{"version":3,"names":["Mesh","Program","Geometry","Vec3","AxesHelper","constructor","gl","_ref","arguments","length","undefined","size","symmetric","xColor","yColor","zColor","meshProps","_objectWithoutProperties","_excluded","a","b","vertices","Float32Array","colors","geometry","position","data","color","program","vertex","fragment","_objectSpread","mode","LINES"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/extras/helpers/AxesHelper.js"],"sourcesContent":["import { Mesh } from '../../core/Mesh.js';\nimport { Program } from '../../core/Program.js';\nimport { Geometry } from '../../core/Geometry.js';\nimport { Vec3 } from '../../math/Vec3.js';\n\nexport class AxesHelper extends Mesh {\n    constructor(\n        gl,\n        {\n            size = 1,\n            symmetric = false,\n            xColor = new Vec3(0.96, 0.21, 0.32),\n            yColor = new Vec3(0.44, 0.64, 0.11),\n            zColor = new Vec3(0.18, 0.52, 0.89),\n            ...meshProps\n        } = {}\n    ) {\n        const a = symmetric ? -size : 0;\n        const b = size;\n\n        // prettier-ignore\n        const vertices = new Float32Array([\n\t\t\ta, 0, 0,  b, 0, 0,\n\t\t\t0, a, 0,  0, b, 0,\n\t\t\t0, 0, a,  0, 0, b\n\t\t]);\n\n        // prettier-ignore\n        const colors = new Float32Array([\n\t\t\t...xColor,  ...xColor,\n\t\t\t...yColor,  ...yColor,\n\t\t\t...zColor,  ...zColor\n\t\t]);\n\n        const geometry = new Geometry(gl, {\n            position: { size: 3, data: vertices },\n            color: { size: 3, data: colors },\n        });\n\n        const program = new Program(gl, { vertex, fragment });\n\n        super(gl, { ...meshProps, mode: gl.LINES, geometry, program });\n    }\n}\n\nconst vertex = /* glsl */ `\nattribute vec3 position;\nattribute vec3 color;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec3 vColor;\n\nvoid main() {    \n    vColor = color;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n`;\n\nconst fragment = /* glsl */ `\nprecision highp float;\nvarying vec3 vColor;\n\nvoid main() {    \n    gl_FragColor = vec4(vColor, 1.0);\n}\n`;\n"],"mappings":";;;AAAA,SAASA,IAAI,QAAQ,oBAAoB;AACzC,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,IAAI,QAAQ,oBAAoB;AAEzC,OAAO,MAAMC,UAAU,SAASJ,IAAI,CAAC;EACjCK,WAAWA,CACPC,EAAE,EASJ;IAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MADM,CAAC,CAAC;MAPN;QACIG,IAAI,GAAG,CAAC;QACRC,SAAS,GAAG,KAAK;QACjBC,MAAM,GAAG,IAAIV,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;QACnCW,MAAM,GAAG,IAAIX,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;QACnCY,MAAM,GAAG,IAAIZ,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI;MAEtC,CAAC,GAAAI,IAAA;MADMS,SAAS,GAAAC,wBAAA,CAAAV,IAAA,EAAAW,SAAA;IAGhB,MAAMC,CAAC,GAAGP,SAAS,GAAG,CAACD,IAAI,GAAG,CAAC;IAC/B,MAAMS,CAAC,GAAGT,IAAI;;IAEd;IACA,MAAMU,QAAQ,GAAG,IAAIC,YAAY,CAAC,CACvCH,CAAC,EAAE,CAAC,EAAE,CAAC,EAAGC,CAAC,EAAE,CAAC,EAAE,CAAC,EACjB,CAAC,EAAED,CAAC,EAAE,CAAC,EAAG,CAAC,EAAEC,CAAC,EAAE,CAAC,EACjB,CAAC,EAAE,CAAC,EAAED,CAAC,EAAG,CAAC,EAAE,CAAC,EAAEC,CAAC,CACjB,CAAC;;IAEI;IACA,MAAMG,MAAM,GAAG,IAAID,YAAY,CAAC,CACrC,GAAGT,MAAM,EAAG,GAAGA,MAAM,EACrB,GAAGC,MAAM,EAAG,GAAGA,MAAM,EACrB,GAAGC,MAAM,EAAG,GAAGA,MAAM,CACrB,CAAC;IAEI,MAAMS,QAAQ,GAAG,IAAItB,QAAQ,CAACI,EAAE,EAAE;MAC9BmB,QAAQ,EAAE;QAAEd,IAAI,EAAE,CAAC;QAAEe,IAAI,EAAEL;MAAS,CAAC;MACrCM,KAAK,EAAE;QAAEhB,IAAI,EAAE,CAAC;QAAEe,IAAI,EAAEH;MAAO;IACnC,CAAC,CAAC;IAEF,MAAMK,OAAO,GAAG,IAAI3B,OAAO,CAACK,EAAE,EAAE;MAAEuB,MAAM;MAAEC;IAAS,CAAC,CAAC;IAErD,KAAK,CAACxB,EAAE,EAAAyB,aAAA,CAAAA,aAAA,KAAOf,SAAS;MAAEgB,IAAI,EAAE1B,EAAE,CAAC2B,KAAK;MAAET,QAAQ;MAAEI;IAAO,EAAE,CAAC;EAClE;AACJ;AAEA,MAAMC,MAAM,GAAG,gRAYd;AAED,MAAMC,QAAQ,GAAG,2HAOhB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}