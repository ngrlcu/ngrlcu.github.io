{"ast":null,"code":"import BaseSegment from './BaseSegment.js';\nimport { Vec3 } from '../../math/Vec3.js';\nimport { lerp as lerp3 } from '../../math/functions/Vec3Func.js';\nconst tempVec3 = /* @__PURE__ */new Vec3();\nexport default class LineSegment extends BaseSegment {\n  constructor(p0, p1) {\n    let tiltStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let tiltEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    super();\n    this.p0 = p0;\n    this.p1 = p1;\n    this.tiltStart = tiltStart;\n    this.tiltEnd = tiltEnd;\n    this._len = -1;\n  }\n\n  /**\n   * Updates the segment length. You must call this method every time you change the curve's control points.\n   */\n  updateLength() {\n    this._len = tempVec3.sub(this.p1, this.p0).len();\n  }\n\n  /**\n   * Get point at relative position in curve according to segment length.\n   * @param {number} t Distance at time t in range [0 .. 1]\n   * @param {Vec3} out Optional Vec3 to output\n   * @returns {Vec3} Point at relative position\n   */\n  getPointAt(t) {\n    let out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vec3();\n    lerp3(out, this.p0, this.p1, t);\n    return out;\n  }\n\n  /**\n   * Returns a unit vector tangent at t\n   * @param {number} t Distance at time t in range [0 .. 1]\n   * @param {Vec3} out Optional Vec3 to output\n   * @returns {Vec3} A unit vector\n   */\n  getTangentAt(t) {\n    let out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vec3();\n    return out.sub(this.p1, this.p0).normalize();\n  }\n  lastPoint() {\n    return this.p1;\n  }\n}","map":{"version":3,"names":["BaseSegment","Vec3","lerp","lerp3","tempVec3","LineSegment","constructor","p0","p1","tiltStart","arguments","length","undefined","tiltEnd","_len","updateLength","sub","len","getPointAt","t","out","getTangentAt","normalize","lastPoint"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/extras/path/LineSegment.js"],"sourcesContent":["import BaseSegment from './BaseSegment.js';\nimport { Vec3 } from '../../math/Vec3.js';\nimport { lerp as lerp3 } from '../../math/functions/Vec3Func.js';\n\nconst tempVec3 = /* @__PURE__ */ new Vec3();\n\nexport default class LineSegment extends BaseSegment {\n    constructor(p0, p1, tiltStart = 0, tiltEnd = 0) {\n        super();\n        this.p0 = p0;\n        this.p1 = p1;\n\n        this.tiltStart = tiltStart;\n        this.tiltEnd = tiltEnd;\n\n        this._len = -1;\n    }\n\n    /**\n     * Updates the segment length. You must call this method every time you change the curve's control points.\n     */\n    updateLength() {\n        this._len = tempVec3.sub(this.p1, this.p0).len();\n    }\n\n    /**\n     * Get point at relative position in curve according to segment length.\n     * @param {number} t Distance at time t in range [0 .. 1]\n     * @param {Vec3} out Optional Vec3 to output\n     * @returns {Vec3} Point at relative position\n     */\n    getPointAt(t, out = new Vec3()) {\n        lerp3(out, this.p0, this.p1, t);\n        return out;\n    }\n\n    /**\n     * Returns a unit vector tangent at t\n     * @param {number} t Distance at time t in range [0 .. 1]\n     * @param {Vec3} out Optional Vec3 to output\n     * @returns {Vec3} A unit vector\n     */\n    getTangentAt(t, out = new Vec3()) {\n        return out.sub(this.p1, this.p0).normalize();\n    }\n\n    lastPoint() {\n        return this.p1;\n    }\n}\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,kBAAkB;AAC1C,SAASC,IAAI,QAAQ,oBAAoB;AACzC,SAASC,IAAI,IAAIC,KAAK,QAAQ,kCAAkC;AAEhE,MAAMC,QAAQ,GAAG,eAAgB,IAAIH,IAAI,CAAC,CAAC;AAE3C,eAAe,MAAMI,WAAW,SAASL,WAAW,CAAC;EACjDM,WAAWA,CAACC,EAAE,EAAEC,EAAE,EAA8B;IAAA,IAA5BC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAAA,IAAEG,OAAO,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAC1C,KAAK,CAAC,CAAC;IACP,IAAI,CAACH,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,EAAE,GAAGA,EAAE;IAEZ,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACI,OAAO,GAAGA,OAAO;IAEtB,IAAI,CAACC,IAAI,GAAG,CAAC,CAAC;EAClB;;EAEA;AACJ;AACA;EACIC,YAAYA,CAAA,EAAG;IACX,IAAI,CAACD,IAAI,GAAGV,QAAQ,CAACY,GAAG,CAAC,IAAI,CAACR,EAAE,EAAE,IAAI,CAACD,EAAE,CAAC,CAACU,GAAG,CAAC,CAAC;EACpD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACC,CAAC,EAAoB;IAAA,IAAlBC,GAAG,GAAAV,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAIT,IAAI,CAAC,CAAC;IAC1BE,KAAK,CAACiB,GAAG,EAAE,IAAI,CAACb,EAAE,EAAE,IAAI,CAACC,EAAE,EAAEW,CAAC,CAAC;IAC/B,OAAOC,GAAG;EACd;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIC,YAAYA,CAACF,CAAC,EAAoB;IAAA,IAAlBC,GAAG,GAAAV,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAIT,IAAI,CAAC,CAAC;IAC5B,OAAOmB,GAAG,CAACJ,GAAG,CAAC,IAAI,CAACR,EAAE,EAAE,IAAI,CAACD,EAAE,CAAC,CAACe,SAAS,CAAC,CAAC;EAChD;EAEAC,SAASA,CAAA,EAAG;IACR,OAAO,IAAI,CAACf,EAAE;EAClB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}