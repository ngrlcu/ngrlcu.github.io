{"ast":null,"code":"let id = 0;\nexport class DracoManager {\n  constructor(workerSrc) {\n    this.onMessage = this.onMessage.bind(this);\n    this.queue = new Map();\n    this.initWorker(workerSrc);\n  }\n  initWorker(workerSrc) {\n    this.worker = new Worker(workerSrc);\n    this.worker.onmessage = this.onMessage;\n  }\n  onMessage(_ref) {\n    let {\n      data\n    } = _ref;\n    const {\n      id,\n      error,\n      geometry\n    } = data;\n    if (error) {\n      console.log(error, id);\n      return;\n    }\n    const geometryResolve = this.queue.get(id);\n    this.queue.delete(id);\n    geometryResolve(geometry);\n  }\n  decodeGeometry(buffer, config) {\n    id++;\n    this.worker.postMessage({\n      id,\n      buffer,\n      config\n    });\n    let geometryResolve;\n    const promise = new Promise(res => geometryResolve = res);\n    this.queue.set(id, geometryResolve);\n    return promise;\n  }\n}","map":{"version":3,"names":["id","DracoManager","constructor","workerSrc","onMessage","bind","queue","Map","initWorker","worker","Worker","onmessage","_ref","data","error","geometry","console","log","geometryResolve","get","delete","decodeGeometry","buffer","config","postMessage","promise","Promise","res","set"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/extras/DracoManager.js"],"sourcesContent":["let id = 0;\n\nexport class DracoManager {\n    constructor(workerSrc) {\n        this.onMessage = this.onMessage.bind(this);\n        this.queue = new Map();\n        this.initWorker(workerSrc);\n    }\n\n    initWorker(workerSrc) {\n        this.worker = new Worker(workerSrc);\n        this.worker.onmessage = this.onMessage;\n    }\n\n    onMessage({ data }) {\n        const { id, error, geometry } = data;\n        if (error) {\n            console.log(error, id);\n            return;\n        }\n        const geometryResolve = this.queue.get(id);\n        this.queue.delete(id);\n        geometryResolve(geometry);\n    }\n\n    decodeGeometry(buffer, config) {\n        id++;\n        this.worker.postMessage({\n            id,\n            buffer,\n            config,\n        });\n        let geometryResolve;\n        const promise = new Promise((res) => (geometryResolve = res));\n        this.queue.set(id, geometryResolve);\n        return promise;\n    }\n}\n"],"mappings":"AAAA,IAAIA,EAAE,GAAG,CAAC;AAEV,OAAO,MAAMC,YAAY,CAAC;EACtBC,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC;IAC1C,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;IACtB,IAAI,CAACC,UAAU,CAACL,SAAS,CAAC;EAC9B;EAEAK,UAAUA,CAACL,SAAS,EAAE;IAClB,IAAI,CAACM,MAAM,GAAG,IAAIC,MAAM,CAACP,SAAS,CAAC;IACnC,IAAI,CAACM,MAAM,CAACE,SAAS,GAAG,IAAI,CAACP,SAAS;EAC1C;EAEAA,SAASA,CAAAQ,IAAA,EAAW;IAAA,IAAV;MAAEC;IAAK,CAAC,GAAAD,IAAA;IACd,MAAM;MAAEZ,EAAE;MAAEc,KAAK;MAAEC;IAAS,CAAC,GAAGF,IAAI;IACpC,IAAIC,KAAK,EAAE;MACPE,OAAO,CAACC,GAAG,CAACH,KAAK,EAAEd,EAAE,CAAC;MACtB;IACJ;IACA,MAAMkB,eAAe,GAAG,IAAI,CAACZ,KAAK,CAACa,GAAG,CAACnB,EAAE,CAAC;IAC1C,IAAI,CAACM,KAAK,CAACc,MAAM,CAACpB,EAAE,CAAC;IACrBkB,eAAe,CAACH,QAAQ,CAAC;EAC7B;EAEAM,cAAcA,CAACC,MAAM,EAAEC,MAAM,EAAE;IAC3BvB,EAAE,EAAE;IACJ,IAAI,CAACS,MAAM,CAACe,WAAW,CAAC;MACpBxB,EAAE;MACFsB,MAAM;MACNC;IACJ,CAAC,CAAC;IACF,IAAIL,eAAe;IACnB,MAAMO,OAAO,GAAG,IAAIC,OAAO,CAAEC,GAAG,IAAMT,eAAe,GAAGS,GAAI,CAAC;IAC7D,IAAI,CAACrB,KAAK,CAACsB,GAAG,CAAC5B,EAAE,EAAEkB,eAAe,CAAC;IACnC,OAAOO,OAAO;EAClB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}