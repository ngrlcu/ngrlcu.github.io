{"ast":null,"code":"// from https://github.com/Pomax/bezierjs/blob/d19695f3cc3ce383cf38ce4643f467deca7edb92/src/utils.js#L26\n// Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\nexport const T_VALUES = [-0.0640568928626056260850430826247450385909, 0.0640568928626056260850430826247450385909, -0.1911188674736163091586398207570696318404, 0.1911188674736163091586398207570696318404, -0.3150426796961633743867932913198102407864, 0.3150426796961633743867932913198102407864, -0.4337935076260451384870842319133497124524, 0.4337935076260451384870842319133497124524, -0.5454214713888395356583756172183723700107, 0.5454214713888395356583756172183723700107, -0.6480936519369755692524957869107476266696, 0.6480936519369755692524957869107476266696, -0.7401241915785543642438281030999784255232, 0.7401241915785543642438281030999784255232, -0.8200019859739029219539498726697452080761, 0.8200019859739029219539498726697452080761, -0.8864155270044010342131543419821967550873, 0.8864155270044010342131543419821967550873, -0.9382745520027327585236490017087214496548, 0.9382745520027327585236490017087214496548, -0.9747285559713094981983919930081690617411, 0.9747285559713094981983919930081690617411, -0.9951872199970213601799974097007368118745, 0.9951872199970213601799974097007368118745];\n\n// Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\nexport const C_VALUES = [0.1279381953467521569740561652246953718517, 0.1279381953467521569740561652246953718517, 0.1258374563468282961213753825111836887264, 0.1258374563468282961213753825111836887264, 0.121670472927803391204463153476262425607, 0.121670472927803391204463153476262425607, 0.1155056680537256013533444839067835598622, 0.1155056680537256013533444839067835598622, 0.1074442701159656347825773424466062227946, 0.1074442701159656347825773424466062227946, 0.0976186521041138882698806644642471544279, 0.0976186521041138882698806644642471544279, 0.086190161531953275917185202983742667185, 0.086190161531953275917185202983742667185, 0.0733464814110803057340336152531165181193, 0.0733464814110803057340336152531165181193, 0.0592985849154367807463677585001085845412, 0.0592985849154367807463677585001085845412, 0.0442774388174198061686027482113382288593, 0.0442774388174198061686027482113382288593, 0.0285313886289336631813078159518782864491, 0.0285313886289336631813078159518782864491, 0.0123412297999871995468056670700372915759, 0.0123412297999871995468056670700372915759];\n\n/**\n * Convert Degree To Radian\n * @param {number} a Angle in Degrees\n * @returns {number} a Angle in Radians\n */\nexport const toRadian = a => a * Math.PI / 180;\n\n/**\n * Convert Radian To Degree\n * @param {number} a Angle in Radians\n * @returns {number} a Angle in Radian\n */\nexport const toDegrees = a => 180 * a / Math.PI;\nexport const clamp = (val, min, max) => Math.max(min, Math.min(val, max));\nexport const lerp = (t, v0, v1) => v0 * (t - 1) + v1 * t;\n\n/**\n * Fills a rotation matrix with the given sine and cosine of the angle around the given axis\n * This function helps to avoid inverse trigonometry\n * @param {Mat4} out mat4 receiving operation result\n * @param {Vec3} axis the axis to rotate around. Should be normalized\n * @param {number} sin sine of rotation angle\n * @param {number} cos cosine of rotation angle\n * @returns {Mat4} out\n */\nexport function mat4fromRotationSinCos(out, axis, sin, cos) {\n  const x = axis[0];\n  const y = axis[1];\n  const z = axis[2];\n  const t = 1 - cos;\n  out[0] = x * x * t + cos;\n  out[1] = y * x * t + z * sin;\n  out[2] = z * x * t - y * sin;\n  out[3] = 0;\n  out[4] = x * y * t - z * sin;\n  out[5] = y * y * t + cos;\n  out[6] = z * y * t + x * sin;\n  out[7] = 0;\n  out[8] = x * z * t + y * sin;\n  out[9] = y * z * t - x * sin;\n  out[10] = z * z * t + cos;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Rotates the normal and binormal around its tangent by the given angle.\n *\n * see: https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula\n * @param {number} angle rotation angle\n * @param {Vec3} norm unit normal vector\n * @param {Vec3} binorm unit binormal vector\n * @param {Vec3} outNorm optional normal output vector. If not present then normal vector changes in place\n * @param {Vec3} outBinorm optional binormal output vector. If not present then binormal vector changes in place\n */\nexport function rotateNormalBinormal(angle, norm, binorm) {\n  let outNorm = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : norm;\n  let outBinorm = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : binorm;\n  const s = Math.sin(angle);\n  const c = Math.cos(angle);\n  const nx = c * norm.x + s * binorm.x;\n  const ny = c * norm.y + s * binorm.y;\n  const nz = c * norm.z + s * binorm.z;\n  const bx = c * binorm.x - s * norm.x;\n  const by = c * binorm.y - s * norm.y;\n  const bz = c * binorm.z - s * norm.z;\n  outNorm.set(nx, ny, nz);\n  outBinorm.set(bx, by, bz);\n}","map":{"version":3,"names":["T_VALUES","C_VALUES","toRadian","a","Math","PI","toDegrees","clamp","val","min","max","lerp","t","v0","v1","mat4fromRotationSinCos","out","axis","sin","cos","x","y","z","rotateNormalBinormal","angle","norm","binorm","outNorm","arguments","length","undefined","outBinorm","s","c","nx","ny","nz","bx","by","bz","set"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/extras/path/utils.js"],"sourcesContent":["// from https://github.com/Pomax/bezierjs/blob/d19695f3cc3ce383cf38ce4643f467deca7edb92/src/utils.js#L26\n// Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\nexport const T_VALUES = [\n    -0.0640568928626056260850430826247450385909, 0.0640568928626056260850430826247450385909, -0.1911188674736163091586398207570696318404,\n    0.1911188674736163091586398207570696318404, -0.3150426796961633743867932913198102407864, 0.3150426796961633743867932913198102407864,\n    -0.4337935076260451384870842319133497124524, 0.4337935076260451384870842319133497124524, -0.5454214713888395356583756172183723700107,\n    0.5454214713888395356583756172183723700107, -0.6480936519369755692524957869107476266696, 0.6480936519369755692524957869107476266696,\n    -0.7401241915785543642438281030999784255232, 0.7401241915785543642438281030999784255232, -0.8200019859739029219539498726697452080761,\n    0.8200019859739029219539498726697452080761, -0.8864155270044010342131543419821967550873, 0.8864155270044010342131543419821967550873,\n    -0.9382745520027327585236490017087214496548, 0.9382745520027327585236490017087214496548, -0.9747285559713094981983919930081690617411,\n    0.9747285559713094981983919930081690617411, -0.9951872199970213601799974097007368118745, 0.9951872199970213601799974097007368118745,\n];\n\n// Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\nexport const C_VALUES = [\n    0.1279381953467521569740561652246953718517, 0.1279381953467521569740561652246953718517, 0.1258374563468282961213753825111836887264,\n    0.1258374563468282961213753825111836887264, 0.121670472927803391204463153476262425607, 0.121670472927803391204463153476262425607,\n    0.1155056680537256013533444839067835598622, 0.1155056680537256013533444839067835598622, 0.1074442701159656347825773424466062227946,\n    0.1074442701159656347825773424466062227946, 0.0976186521041138882698806644642471544279, 0.0976186521041138882698806644642471544279,\n    0.086190161531953275917185202983742667185, 0.086190161531953275917185202983742667185, 0.0733464814110803057340336152531165181193,\n    0.0733464814110803057340336152531165181193, 0.0592985849154367807463677585001085845412, 0.0592985849154367807463677585001085845412,\n    0.0442774388174198061686027482113382288593, 0.0442774388174198061686027482113382288593, 0.0285313886289336631813078159518782864491,\n    0.0285313886289336631813078159518782864491, 0.0123412297999871995468056670700372915759, 0.0123412297999871995468056670700372915759,\n];\n\n/**\n * Convert Degree To Radian\n * @param {number} a Angle in Degrees\n * @returns {number} a Angle in Radians\n */\nexport const toRadian = (a) => (a * Math.PI) / 180;\n\n/**\n * Convert Radian To Degree\n * @param {number} a Angle in Radians\n * @returns {number} a Angle in Radian\n */\nexport const toDegrees = (a) => (180 * a) / Math.PI;\n\nexport const clamp = (val, min, max) => Math.max(min, Math.min(val, max));\nexport const lerp = (t, v0, v1) => v0 * (t - 1) + v1 * t;\n\n/**\n * Fills a rotation matrix with the given sine and cosine of the angle around the given axis\n * This function helps to avoid inverse trigonometry\n * @param {Mat4} out mat4 receiving operation result\n * @param {Vec3} axis the axis to rotate around. Should be normalized\n * @param {number} sin sine of rotation angle\n * @param {number} cos cosine of rotation angle\n * @returns {Mat4} out\n */\nexport function mat4fromRotationSinCos(out, axis, sin, cos) {\n    const x = axis[0];\n    const y = axis[1];\n    const z = axis[2];\n    const t = 1 - cos;\n\n    out[0] = x * x * t + cos;\n    out[1] = y * x * t + z * sin;\n    out[2] = z * x * t - y * sin;\n    out[3] = 0;\n    out[4] = x * y * t - z * sin;\n    out[5] = y * y * t + cos;\n    out[6] = z * y * t + x * sin;\n    out[7] = 0;\n    out[8] = x * z * t + y * sin;\n    out[9] = y * z * t - x * sin;\n    out[10] = z * z * t + cos;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Rotates the normal and binormal around its tangent by the given angle.\n *\n * see: https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula\n * @param {number} angle rotation angle\n * @param {Vec3} norm unit normal vector\n * @param {Vec3} binorm unit binormal vector\n * @param {Vec3} outNorm optional normal output vector. If not present then normal vector changes in place\n * @param {Vec3} outBinorm optional binormal output vector. If not present then binormal vector changes in place\n */\nexport function rotateNormalBinormal(angle, norm, binorm, outNorm = norm, outBinorm = binorm) {\n    const s = Math.sin(angle);\n    const c = Math.cos(angle);\n\n    const nx = c * norm.x + s * binorm.x;\n    const ny = c * norm.y + s * binorm.y;\n    const nz = c * norm.z + s * binorm.z;\n\n    const bx = c * binorm.x - s * norm.x;\n    const by = c * binorm.y - s * norm.y;\n    const bz = c * binorm.z - s * norm.z;\n\n    outNorm.set(nx, ny, nz);\n    outBinorm.set(bx, by, bz);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}