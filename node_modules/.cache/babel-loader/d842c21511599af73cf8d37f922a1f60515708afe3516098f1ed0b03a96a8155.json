{"ast":null,"code":"import { Transform } from './Transform.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Vec3 } from '../math/Vec3.js';\nconst tempMat4 = /* @__PURE__ */new Mat4();\nconst tempVec3a = /* @__PURE__ */new Vec3();\nconst tempVec3b = /* @__PURE__ */new Vec3();\nexport class Camera extends Transform {\n  constructor(gl) {\n    let {\n      near = 0.1,\n      far = 100,\n      fov = 45,\n      aspect = 1,\n      left,\n      right,\n      bottom,\n      top,\n      zoom = 1\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    Object.assign(this, {\n      near,\n      far,\n      fov,\n      aspect,\n      left,\n      right,\n      bottom,\n      top,\n      zoom\n    });\n    this.projectionMatrix = new Mat4();\n    this.viewMatrix = new Mat4();\n    this.projectionViewMatrix = new Mat4();\n    this.worldPosition = new Vec3();\n\n    // Use orthographic if left/right set, else default to perspective camera\n    this.type = left || right ? 'orthographic' : 'perspective';\n    if (this.type === 'orthographic') this.orthographic();else this.perspective();\n  }\n  perspective() {\n    let {\n      near = this.near,\n      far = this.far,\n      fov = this.fov,\n      aspect = this.aspect\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Object.assign(this, {\n      near,\n      far,\n      fov,\n      aspect\n    });\n    this.projectionMatrix.fromPerspective({\n      fov: fov * (Math.PI / 180),\n      aspect,\n      near,\n      far\n    });\n    this.type = 'perspective';\n    return this;\n  }\n  orthographic() {\n    let {\n      near = this.near,\n      far = this.far,\n      left = this.left || -1,\n      right = this.right || 1,\n      bottom = this.bottom || -1,\n      top = this.top || 1,\n      zoom = this.zoom\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Object.assign(this, {\n      near,\n      far,\n      left,\n      right,\n      bottom,\n      top,\n      zoom\n    });\n    left /= zoom;\n    right /= zoom;\n    bottom /= zoom;\n    top /= zoom;\n    this.projectionMatrix.fromOrthogonal({\n      left,\n      right,\n      bottom,\n      top,\n      near,\n      far\n    });\n    this.type = 'orthographic';\n    return this;\n  }\n  updateMatrixWorld() {\n    super.updateMatrixWorld();\n    this.viewMatrix.inverse(this.worldMatrix);\n    this.worldMatrix.getTranslation(this.worldPosition);\n\n    // used for sorting\n    this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n    return this;\n  }\n  updateProjectionMatrix() {\n    if (this.type === 'perspective') {\n      return this.perspective();\n    } else {\n      return this.orthographic();\n    }\n  }\n  lookAt(target) {\n    super.lookAt(target, true);\n    return this;\n  }\n\n  // Project 3D coordinate to 2D point\n  project(v) {\n    v.applyMatrix4(this.viewMatrix);\n    v.applyMatrix4(this.projectionMatrix);\n    return this;\n  }\n\n  // Unproject 2D point to 3D coordinate\n  unproject(v) {\n    v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\n    v.applyMatrix4(this.worldMatrix);\n    return this;\n  }\n  updateFrustum() {\n    if (!this.frustum) {\n      this.frustum = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n    }\n    const m = this.projectionViewMatrix;\n    this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\n    this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\n    this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\n    this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\n    this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\n    this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\n\n    for (let i = 0; i < 6; i++) {\n      const invLen = 1.0 / this.frustum[i].distance();\n      this.frustum[i].multiply(invLen);\n      this.frustum[i].constant *= invLen;\n    }\n  }\n  frustumIntersectsMesh(node) {\n    let worldMatrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : node.worldMatrix;\n    // If no position attribute, treat as frustumCulled false\n    if (!node.geometry.attributes.position) return true;\n    if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n    if (!node.geometry.bounds) return true;\n    const center = tempVec3a;\n    center.copy(node.geometry.bounds.center);\n    center.applyMatrix4(worldMatrix);\n    const radius = node.geometry.bounds.radius * worldMatrix.getMaxScaleOnAxis();\n    return this.frustumIntersectsSphere(center, radius);\n  }\n  frustumIntersectsSphere(center, radius) {\n    const normal = tempVec3b;\n    for (let i = 0; i < 6; i++) {\n      const plane = this.frustum[i];\n      const distance = normal.copy(plane).dot(center) + plane.constant;\n      if (distance < -radius) return false;\n    }\n    return true;\n  }\n}","map":{"version":3,"names":["Transform","Mat4","Vec3","tempMat4","tempVec3a","tempVec3b","Camera","constructor","gl","near","far","fov","aspect","left","right","bottom","top","zoom","arguments","length","undefined","Object","assign","projectionMatrix","viewMatrix","projectionViewMatrix","worldPosition","type","orthographic","perspective","fromPerspective","Math","PI","fromOrthogonal","updateMatrixWorld","inverse","worldMatrix","getTranslation","multiply","updateProjectionMatrix","lookAt","target","project","v","applyMatrix4","unproject","updateFrustum","frustum","m","set","constant","i","invLen","distance","frustumIntersectsMesh","node","geometry","attributes","position","bounds","radius","Infinity","computeBoundingSphere","center","copy","getMaxScaleOnAxis","frustumIntersectsSphere","normal","plane","dot"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/core/Camera.js"],"sourcesContent":["import { Transform } from './Transform.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempMat4 = /* @__PURE__ */ new Mat4();\nconst tempVec3a = /* @__PURE__ */ new Vec3();\nconst tempVec3b = /* @__PURE__ */ new Vec3();\n\nexport class Camera extends Transform {\n    constructor(gl, { near = 0.1, far = 100, fov = 45, aspect = 1, left, right, bottom, top, zoom = 1 } = {}) {\n        super();\n\n        Object.assign(this, { near, far, fov, aspect, left, right, bottom, top, zoom });\n\n        this.projectionMatrix = new Mat4();\n        this.viewMatrix = new Mat4();\n        this.projectionViewMatrix = new Mat4();\n        this.worldPosition = new Vec3();\n\n        // Use orthographic if left/right set, else default to perspective camera\n        this.type = left || right ? 'orthographic' : 'perspective';\n\n        if (this.type === 'orthographic') this.orthographic();\n        else this.perspective();\n    }\n\n    perspective({ near = this.near, far = this.far, fov = this.fov, aspect = this.aspect } = {}) {\n        Object.assign(this, { near, far, fov, aspect });\n        this.projectionMatrix.fromPerspective({ fov: fov * (Math.PI / 180), aspect, near, far });\n        this.type = 'perspective';\n        return this;\n    }\n\n    orthographic({\n        near = this.near,\n        far = this.far,\n        left = this.left || -1,\n        right = this.right || 1,\n        bottom = this.bottom || -1,\n        top = this.top || 1,\n        zoom = this.zoom,\n    } = {}) {\n        Object.assign(this, { near, far, left, right, bottom, top, zoom });\n        left /= zoom;\n        right /= zoom;\n        bottom /= zoom;\n        top /= zoom;\n        this.projectionMatrix.fromOrthogonal({ left, right, bottom, top, near, far });\n        this.type = 'orthographic';\n        return this;\n    }\n\n    updateMatrixWorld() {\n        super.updateMatrixWorld();\n        this.viewMatrix.inverse(this.worldMatrix);\n        this.worldMatrix.getTranslation(this.worldPosition);\n\n        // used for sorting\n        this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n        return this;\n    }\n\n    updateProjectionMatrix() {\n        if (this.type === 'perspective') {\n            return this.perspective();\n        } else {\n            return this.orthographic();\n        }\n    }\n\n    lookAt(target) {\n        super.lookAt(target, true);\n        return this;\n    }\n\n    // Project 3D coordinate to 2D point\n    project(v) {\n        v.applyMatrix4(this.viewMatrix);\n        v.applyMatrix4(this.projectionMatrix);\n        return this;\n    }\n\n    // Unproject 2D point to 3D coordinate\n    unproject(v) {\n        v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\n        v.applyMatrix4(this.worldMatrix);\n        return this;\n    }\n\n    updateFrustum() {\n        if (!this.frustum) {\n            this.frustum = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n        }\n\n        const m = this.projectionViewMatrix;\n        this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\n        this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\n        this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\n        this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\n        this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\n        this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\n\n        for (let i = 0; i < 6; i++) {\n            const invLen = 1.0 / this.frustum[i].distance();\n            this.frustum[i].multiply(invLen);\n            this.frustum[i].constant *= invLen;\n        }\n    }\n\n    frustumIntersectsMesh(node, worldMatrix = node.worldMatrix) {\n        // If no position attribute, treat as frustumCulled false\n        if (!node.geometry.attributes.position) return true;\n\n        if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n\n        if (!node.geometry.bounds) return true;\n\n        const center = tempVec3a;\n        center.copy(node.geometry.bounds.center);\n        center.applyMatrix4(worldMatrix);\n\n        const radius = node.geometry.bounds.radius * worldMatrix.getMaxScaleOnAxis();\n\n        return this.frustumIntersectsSphere(center, radius);\n    }\n\n    frustumIntersectsSphere(center, radius) {\n        const normal = tempVec3b;\n\n        for (let i = 0; i < 6; i++) {\n            const plane = this.frustum[i];\n            const distance = normal.copy(plane).dot(center) + plane.constant;\n            if (distance < -radius) return false;\n        }\n        return true;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}