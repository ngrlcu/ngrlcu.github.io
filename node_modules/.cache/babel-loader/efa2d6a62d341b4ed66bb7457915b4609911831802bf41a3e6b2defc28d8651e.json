{"ast":null,"code":"import _objectSpread from \"/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Texture } from '../core/Texture.js';\nexport class Texture3D extends Texture {\n  constructor(gl, args) {\n    super(gl, _objectSpread(_objectSpread({}, args), {}, {\n      target: gl.TEXTURE_3D,\n      width: args.width ? args.width : 2,\n      height: args.height ? args.height : 2\n    }));\n    const image = new Image();\n    image.crossOrigin = '*';\n    image.src = args.src;\n    image.onload = () => {\n      let canvas = document.createElement('canvas');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      let ctx = canvas.getContext('2d');\n      ctx.scale(1, -1);\n      ctx.translate(0, -image.height);\n      ctx.drawImage(image, 0, 0);\n      const imageData = ctx.getImageData(0, 0, image.width, image.height).data;\n      canvas = null;\n      ctx = null;\n      let elementCount;\n      switch (this.format) {\n        case gl.RED:\n          elementCount = 1;\n          break;\n        case gl.RG:\n          elementCount = 2;\n          break;\n        case gl.RGB:\n          elementCount = 3;\n          break;\n        default:\n          elementCount = 4;\n          break;\n      }\n      const dataCount = this.width * this.height * this.length * elementCount;\n      const data = this.type === gl.UNSIGNED_BYTE ? new Uint8Array(dataCount) : new Float32Array(dataCount);\n      let dataIterator = 0;\n      for (let z = 0; z < this.length; z++) {\n        for (let y = 0; y < this.height; y++) {\n          for (let x = 0; x < this.width; x++) {\n            let zOffsetX = z % args.tileCountX * this.width;\n            let zOffsetY = Math.floor(z / args.tileCountX) * (this.width * this.height * args.tileCountX);\n            let index = x + zOffsetX + (y * image.width + zOffsetY);\n            const r = imageData[index * 4];\n            const g = imageData[index * 4 + 1];\n            const b = imageData[index * 4 + 2];\n            const a = imageData[index * 4 + 3];\n            let texel = [r, g, b, a];\n            for (let i = 0; i < elementCount; i++) {\n              if (this.type === this.gl.UNSIGNED_BYTE) {\n                data[dataIterator++] = texel[i];\n              } else {\n                data[dataIterator++] = texel[i] / 255;\n              }\n            }\n          }\n        }\n      }\n      this.image = data;\n      this.needsUpdate = true;\n    };\n  }\n}","map":{"version":3,"names":["Texture","Texture3D","constructor","gl","args","_objectSpread","target","TEXTURE_3D","width","height","image","Image","crossOrigin","src","onload","canvas","document","createElement","ctx","getContext","scale","translate","drawImage","imageData","getImageData","data","elementCount","format","RED","RG","RGB","dataCount","length","type","UNSIGNED_BYTE","Uint8Array","Float32Array","dataIterator","z","y","x","zOffsetX","tileCountX","zOffsetY","Math","floor","index","r","g","b","a","texel","i","needsUpdate"],"sources":["/home/nigro/Documents/personal_website/ngrlcu.github.io/node_modules/ogl/src/extras/Texture3D.js"],"sourcesContent":["import { Texture } from '../core/Texture.js';\n\nexport class Texture3D extends Texture {\n    constructor(gl, args) {\n        super(gl, {\n            ...args,\n            target: gl.TEXTURE_3D,\n            width: args.width ? args.width : 2,\n            height: args.height ? args.height : 2,\n        });\n\n        const image = new Image();\n        image.crossOrigin = '*';\n        image.src = args.src;\n\n        image.onload = () => {\n            let canvas = document.createElement('canvas');\n            canvas.width = image.width;\n            canvas.height = image.height;\n\n            let ctx = canvas.getContext('2d');\n            ctx.scale(1, -1);\n            ctx.translate(0, -image.height);\n            ctx.drawImage(image, 0, 0);\n            const imageData = ctx.getImageData(0, 0, image.width, image.height).data;\n\n            canvas = null;\n            ctx = null;\n            let elementCount;\n\n            switch (this.format) {\n                case gl.RED:\n                    elementCount = 1;\n                    break;\n                case gl.RG:\n                    elementCount = 2;\n                    break;\n                case gl.RGB:\n                    elementCount = 3;\n                    break;\n                default:\n                    elementCount = 4;\n                    break;\n            }\n\n            const dataCount = this.width * this.height * this.length * elementCount;\n            const data = this.type === gl.UNSIGNED_BYTE ? new Uint8Array(dataCount) : new Float32Array(dataCount);\n\n            let dataIterator = 0;\n\n            for (let z = 0; z < this.length; z++) {\n                for (let y = 0; y < this.height; y++) {\n                    for (let x = 0; x < this.width; x++) {\n                        let zOffsetX = (z % args.tileCountX) * this.width;\n                        let zOffsetY = Math.floor(z / args.tileCountX) * (this.width * this.height * args.tileCountX);\n                        let index = x + zOffsetX + (y * image.width + zOffsetY);\n\n                        const r = imageData[index * 4];\n                        const g = imageData[index * 4 + 1];\n                        const b = imageData[index * 4 + 2];\n                        const a = imageData[index * 4 + 3];\n\n                        let texel = [r, g, b, a];\n\n                        for (let i = 0; i < elementCount; i++) {\n                            if (this.type === this.gl.UNSIGNED_BYTE) {\n                                data[dataIterator++] = texel[i];\n                            } else {\n                                data[dataIterator++] = texel[i] / 255;\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.image = data;\n            this.needsUpdate = true;\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}